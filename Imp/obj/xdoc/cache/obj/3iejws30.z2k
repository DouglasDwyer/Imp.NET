id: Imp
language: CSharp
name:
  Default: Imp
qualifiedName:
  Default: Imp
type: Assembly
modifiers: {}
items:
- id: DouglasDwyer.Imp
  commentId: N:DouglasDwyer.Imp
  language: CSharp
  name:
    CSharp: DouglasDwyer.Imp
    VB: DouglasDwyer.Imp
  nameWithType:
    CSharp: DouglasDwyer.Imp
    VB: DouglasDwyer.Imp
  qualifiedName:
    CSharp: DouglasDwyer.Imp
    VB: DouglasDwyer.Imp
  type: Namespace
  assemblies:
  - Imp
  modifiers: {}
  items:
  - id: DouglasDwyer.Imp.CallingClientAttribute
    commentId: T:DouglasDwyer.Imp.CallingClientAttribute
    language: CSharp
    name:
      CSharp: CallingClientAttribute
      VB: CallingClientAttribute
    nameWithType:
      CSharp: CallingClientAttribute
      VB: CallingClientAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.CallingClientAttribute
      VB: DouglasDwyer.Imp.CallingClientAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/CallingClientAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: CallingClientAttribute
      path: ../Imp/CallingClientAttribute.cs
      startLine: 9
    summary: "\nIndicates that the value of this parameter should be replaced with the client that remotely called the method. The parameter is only replaced for client-to-server calls, and its type must derive from <xref href=\"DouglasDwyer.Imp.IImpClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]

          public sealed class CallingClientAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Parameter, AllowMultiple:=False, Inherited:=True)>

          Public NotInheritable Class CallingClientAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 2048
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
      - name: Inherited
        type: System.Boolean
        value: true
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items: []
    references:
      DouglasDwyer.Imp.IImpClient: 
  - id: DouglasDwyer.Imp.GeneratorProxyBinder
    commentId: T:DouglasDwyer.Imp.GeneratorProxyBinder
    language: CSharp
    name:
      CSharp: GeneratorProxyBinder
      VB: GeneratorProxyBinder
    nameWithType:
      CSharp: GeneratorProxyBinder
      VB: GeneratorProxyBinder
    qualifiedName:
      CSharp: DouglasDwyer.Imp.GeneratorProxyBinder
      VB: DouglasDwyer.Imp.GeneratorProxyBinder
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/GeneratorProxyBinder.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: GeneratorProxyBinder
      path: ../Imp/GeneratorProxyBinder.cs
      startLine: 13
    summary: "\nRepresents a shared type binder that generates all remote shared types at runtime.\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class GeneratorProxyBinder : IProxyBinder'
        VB: >-
          Public MustInherit Class GeneratorProxyBinder

              Implements IProxyBinder
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.Imp.IProxyBinder
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyIndex
      commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.ProxyIndex
      language: CSharp
      name:
        CSharp: ProxyIndex
        VB: ProxyIndex
      nameWithType:
        CSharp: GeneratorProxyBinder.ProxyIndex
        VB: GeneratorProxyBinder.ProxyIndex
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyIndex
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyIndex
      type: Field
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ProxyIndex
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 31
      summary: "\nAn indexed collection of all shared interfaces.\n"
      example: []
      syntax:
        content:
          CSharp: protected IdentifiedCollection<Type> ProxyIndex
          VB: Protected ProxyIndex As IdentifiedCollection(Of Type)
        return:
          type: DouglasDwyer.Imp.IdentifiedCollection{System.Type}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyData
      commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.ProxyData
      language: CSharp
      name:
        CSharp: ProxyData
        VB: ProxyData
      nameWithType:
        CSharp: GeneratorProxyBinder.ProxyData
        VB: GeneratorProxyBinder.ProxyData
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyData
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.ProxyData
      type: Field
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ProxyData
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 35
      summary: "\nA list, ordered by index, containing data about each shared interface type.\n"
      example: []
      syntax:
        content:
          CSharp: protected List<ProxyType> ProxyData
          VB: Protected ProxyData As List(Of ProxyType)
        return:
          type: System.Collections.Generic.List{DouglasDwyer.Imp.ProxyType}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.LocalClassToInterface
      commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.LocalClassToInterface
      language: CSharp
      name:
        CSharp: LocalClassToInterface
        VB: LocalClassToInterface
      nameWithType:
        CSharp: GeneratorProxyBinder.LocalClassToInterface
        VB: GeneratorProxyBinder.LocalClassToInterface
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.LocalClassToInterface
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.LocalClassToInterface
      type: Field
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: LocalClassToInterface
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 39
      summary: "\nA dictionary that contains bindings between local shared classes and their respective shared interfaces.\n"
      example: []
      syntax:
        content:
          CSharp: protected Dictionary<Type, Type> LocalClassToInterface
          VB: Protected LocalClassToInterface As Dictionary(Of Type, Type)
        return:
          type: System.Collections.Generic.Dictionary{System.Type,System.Type}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface
      commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface
      language: CSharp
      name:
        CSharp: RemoteClassToInterface
        VB: RemoteClassToInterface
      nameWithType:
        CSharp: GeneratorProxyBinder.RemoteClassToInterface
        VB: GeneratorProxyBinder.RemoteClassToInterface
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface
      type: Field
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: RemoteClassToInterface
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 43
      summary: "\nA dictionary that contains bindings between remote shared classes and their respective shared interfaces.\n"
      example: []
      syntax:
        content:
          CSharp: protected Dictionary<Type, Type> RemoteClassToInterface
          VB: Protected RemoteClassToInterface As Dictionary(Of Type, Type)
        return:
          type: System.Collections.Generic.Dictionary{System.Type,System.Type}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass
      commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass
      language: CSharp
      name:
        CSharp: RemoteInterfaceToClass
        VB: RemoteInterfaceToClass
      nameWithType:
        CSharp: GeneratorProxyBinder.RemoteInterfaceToClass
        VB: GeneratorProxyBinder.RemoteInterfaceToClass
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass
      type: Field
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: RemoteInterfaceToClass
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 47
      summary: "\nA dictionary that contains bindings between remote shared interfaces and their respective shared classes.\n"
      example: []
      syntax:
        content:
          CSharp: protected Dictionary<Type, Type> RemoteInterfaceToClass
          VB: Protected RemoteInterfaceToClass As Dictionary(Of Type, Type)
        return:
          type: System.Collections.Generic.Dictionary{System.Type,System.Type}
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy(System.Type)
      language: CSharp
      name:
        CSharp: GetDataForProxy(Type)
        VB: GetDataForProxy(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetDataForProxy(Type)
        VB: GeneratorProxyBinder.GetDataForProxy(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetDataForProxy
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 72
      syntax:
        content:
          CSharp: public virtual ProxyType GetDataForProxy(Type proxyInterface)
          VB: Public Overridable Function GetDataForProxy(proxyInterface As Type) As ProxyType
        parameters:
        - id: proxyInterface
          type: System.Type
        return:
          type: DouglasDwyer.Imp.ProxyType
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType(System.Type)
      language: CSharp
      name:
        CSharp: GetDataForSharedType(Type)
        VB: GetDataForSharedType(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetDataForSharedType(Type)
        VB: GeneratorProxyBinder.GetDataForSharedType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetDataForSharedType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 77
      syntax:
        content:
          CSharp: public virtual ProxyType GetDataForSharedType(Type sharedType)
          VB: Public Overridable Function GetDataForSharedType(sharedType As Type) As ProxyType
        parameters:
        - id: sharedType
          type: System.Type
        return:
          type: DouglasDwyer.Imp.ProxyType
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType(System.Type)
      language: CSharp
      name:
        CSharp: GetProxyForLocalType(Type)
        VB: GetProxyForLocalType(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetProxyForLocalType(Type)
        VB: GeneratorProxyBinder.GetProxyForLocalType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyForLocalType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 154
      syntax:
        content:
          CSharp: public virtual Type GetProxyForLocalType(Type localType)
          VB: Public Overridable Function GetProxyForLocalType(localType As Type) As Type
        parameters:
        - id: localType
          type: System.Type
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType(System.Type)
      language: CSharp
      name:
        CSharp: GetProxyForRemoteType(Type)
        VB: GetProxyForRemoteType(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetProxyForRemoteType(Type)
        VB: GeneratorProxyBinder.GetProxyForRemoteType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyForRemoteType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 185
      syntax:
        content:
          CSharp: public virtual Type GetProxyForRemoteType(Type remoteClass)
          VB: Public Overridable Function GetProxyForRemoteType(remoteClass As Type) As Type
        parameters:
        - id: remoteClass
          type: System.Type
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.UInt16)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.UInt16)
      language: CSharp
      name:
        CSharp: GetRemoteType(UInt16)
        VB: GetRemoteType(UInt16)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetRemoteType(UInt16)
        VB: GeneratorProxyBinder.GetRemoteType(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.UInt16)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.UInt16)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetRemoteType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 216
      syntax:
        content:
          CSharp: public virtual Type GetRemoteType(ushort id)
          VB: Public Overridable Function GetRemoteType(id As UShort) As Type
        parameters:
        - id: id
          type: System.UInt16
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.Type)
      language: CSharp
      name:
        CSharp: GetRemoteType(Type)
        VB: GetRemoteType(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.GetRemoteType(Type)
        VB: GeneratorProxyBinder.GetRemoteType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetRemoteType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 221
      syntax:
        content:
          CSharp: public virtual Type GetRemoteType(Type proxyInterface)
          VB: Public Overridable Function GetRemoteType(proxyInterface As Type) As Type
        parameters:
        - id: proxyInterface
          type: System.Type
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType(System.Type)
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType(System.Type)
      language: CSharp
      name:
        CSharp: IsSharedType(Type)
        VB: IsSharedType(Type)
      nameWithType:
        CSharp: GeneratorProxyBinder.IsSharedType(Type)
        VB: GeneratorProxyBinder.IsSharedType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType(System.Type)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: IsSharedType
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 252
      syntax:
        content:
          CSharp: public bool IsSharedType(Type sharedType)
          VB: Public Function IsSharedType(sharedType As Type) As Boolean
        parameters:
        - id: sharedType
          type: System.Type
        return:
          type: System.Boolean
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes
      language: CSharp
      name:
        CSharp: GetProxyTypes()
        VB: GetProxyTypes()
      nameWithType:
        CSharp: GeneratorProxyBinder.GetProxyTypes()
        VB: GeneratorProxyBinder.GetProxyTypes()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes()
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyTypes
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 257
      syntax:
        content:
          CSharp: public virtual IEnumerable<Type> GetProxyTypes()
          VB: Public Overridable Function GetProxyTypes As IEnumerable(Of Type)
        return:
          type: System.Collections.Generic.IEnumerable{System.Type}
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes*
      implements:
      - DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies(System.Collections.Generic.IEnumerable{System.Type})
      commentId: M:DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies(System.Collections.Generic.IEnumerable{System.Type})
      language: CSharp
      name:
        CSharp: GenerateProxies(IEnumerable<Type>)
        VB: GenerateProxies(IEnumerable(Of Type))
      nameWithType:
        CSharp: GeneratorProxyBinder.GenerateProxies(IEnumerable<Type>)
        VB: GeneratorProxyBinder.GenerateProxies(IEnumerable(Of Type))
      qualifiedName:
        CSharp: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies(System.Collections.Generic.IEnumerable<System.Type>)
        VB: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies(System.Collections.Generic.IEnumerable(Of System.Type))
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/GeneratorProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GenerateProxies
        path: ../Imp/GeneratorProxyBinder.cs
        startLine: 268
      summary: "\nGenerates remote proxies for all of the types in the given list, building the <xref href=\"DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass\" data-throw-if-not-resolved=\"false\"></xref> arrays in the process.\n"
      example: []
      syntax:
        content:
          CSharp: protected void GenerateProxies(IEnumerable<Type> proxyTypes)
          VB: Protected Sub GenerateProxies(proxyTypes As IEnumerable(Of Type))
        parameters:
        - id: proxyTypes
          type: System.Collections.Generic.IEnumerable{System.Type}
          description: A list containing all of the shared interfaces for which to generate proxies.
      overload: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
      references:
        DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface: 
        DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass: 
  - id: DouglasDwyer.Imp.IdentifiedCollection`1
    commentId: T:DouglasDwyer.Imp.IdentifiedCollection`1
    language: CSharp
    name:
      CSharp: IdentifiedCollection<T>
      VB: IdentifiedCollection(Of T)
    nameWithType:
      CSharp: IdentifiedCollection<T>
      VB: IdentifiedCollection(Of T)
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>
      VB: DouglasDwyer.Imp.IdentifiedCollection(Of T)
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IdentifiedCollection.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IdentifiedCollection
      path: ../Imp/IdentifiedCollection.cs
      startLine: 11
    summary: "\nRepresents a two-way, thread-safe hashtable between <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> keys and values of type T.\n"
    example: []
    syntax:
      content:
        CSharp: public class IdentifiedCollection<T>
        VB: Public Class IdentifiedCollection(Of T)
      typeParameters:
      - id: T
        description: The type of object that this collection will store.
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Keys
      commentId: P:DouglasDwyer.Imp.IdentifiedCollection`1.Keys
      language: CSharp
      name:
        CSharp: Keys
        VB: Keys
      nameWithType:
        CSharp: IdentifiedCollection<T>.Keys
        VB: IdentifiedCollection(Of T).Keys
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Keys
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Keys
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Keys
        path: ../Imp/IdentifiedCollection.cs
        startLine: 16
      summary: "\nThe set of keys in this collection.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<ushort> Keys { get; }
          VB: Public ReadOnly Property Keys As IEnumerable(Of UShort)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{System.UInt16}
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Keys*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Values
      commentId: P:DouglasDwyer.Imp.IdentifiedCollection`1.Values
      language: CSharp
      name:
        CSharp: Values
        VB: Values
      nameWithType:
        CSharp: IdentifiedCollection<T>.Values
        VB: IdentifiedCollection(Of T).Values
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Values
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Values
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Values
        path: ../Imp/IdentifiedCollection.cs
        startLine: 20
      summary: "\nThe set of values in this collection.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<T> Values { get; }
          VB: Public ReadOnly Property Values As IEnumerable(Of T)
        parameters: []
        return:
          type: System.Collections.Generic.IEnumerable{{T}}
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Values*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Count
      commentId: P:DouglasDwyer.Imp.IdentifiedCollection`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: IdentifiedCollection<T>.Count
        VB: IdentifiedCollection(Of T).Count
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Count
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Count
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Count
        path: ../Imp/IdentifiedCollection.cs
        startLine: 24
      summary: "\nThe number of elements in this collection.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Item(System.UInt16)
      commentId: P:DouglasDwyer.Imp.IdentifiedCollection`1.Item(System.UInt16)
      language: CSharp
      name:
        CSharp: Item[UInt16]
        VB: Item(UInt16)
      nameWithType:
        CSharp: IdentifiedCollection<T>.Item[UInt16]
        VB: IdentifiedCollection(Of T).Item(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Item[System.UInt16]
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Item(System.UInt16)
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: this[]
        path: ../Imp/IdentifiedCollection.cs
        startLine: 34
      summary: "\nObtains a value using its ID.\n"
      example: []
      syntax:
        content:
          CSharp: public T this[ushort id] { get; }
          VB: Public ReadOnly Property Item(id As UShort) As T
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the value to obtain.
        return:
          type: '{T}'
          description: The value with the specified ID.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Item(`0)
      commentId: P:DouglasDwyer.Imp.IdentifiedCollection`1.Item(`0)
      language: CSharp
      name:
        CSharp: Item[T]
        VB: Item(T)
      nameWithType:
        CSharp: IdentifiedCollection<T>.Item[T]
        VB: IdentifiedCollection(Of T).Item(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Item[T]
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Item(T)
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: this[]
        path: ../Imp/IdentifiedCollection.cs
        startLine: 44
      summary: "\nObtains the ID of a given value.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort this[T item] { get; }
          VB: Public ReadOnly Property Item(item As T) As UShort
        parameters:
        - id: item
          type: '{T}'
          description: The value with the ID to obtain.
        return:
          type: System.UInt16
          description: The ID of the specified value.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Add(`0)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.Add(`0)
      language: CSharp
      name:
        CSharp: Add(T)
        VB: Add(T)
      nameWithType:
        CSharp: IdentifiedCollection<T>.Add(T)
        VB: IdentifiedCollection(Of T).Add(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Add(T)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Add(T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Add
        path: ../Imp/IdentifiedCollection.cs
        startLine: 54
      summary: "\nAdds an item to the collection.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort Add(T item)
          VB: Public Function Add(item As T) As UShort
        parameters:
        - id: item
          type: '{T}'
          description: The item to add.
        return:
          type: System.UInt16
          description: The ID of the object.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Add(System.Func{System.UInt16,`0})
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.Add(System.Func{System.UInt16,`0})
      language: CSharp
      name:
        CSharp: Add(Func<UInt16, T>)
        VB: Add(Func(Of UInt16, T))
      nameWithType:
        CSharp: IdentifiedCollection<T>.Add(Func<UInt16, T>)
        VB: IdentifiedCollection(Of T).Add(Func(Of UInt16, T))
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Add(System.Func<System.UInt16, T>)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Add(System.Func(Of System.UInt16, T))
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Add
        path: ../Imp/IdentifiedCollection.cs
        startLine: 71
      summary: "\nAdds an item to the collection, allowing for creation of the object in a thread-safe manner.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort Add(Func<ushort, T> itemGenerator)
          VB: Public Function Add(itemGenerator As Func(Of UShort, T)) As UShort
        parameters:
        - id: itemGenerator
          type: System.Func{System.UInt16,{T}}
          description: A function that takes in the item&apos;s ID and returns the new item.
        return:
          type: System.UInt16
          description: The ID of the object.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Remove(System.UInt16)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.Remove(System.UInt16)
      language: CSharp
      name:
        CSharp: Remove(UInt16)
        VB: Remove(UInt16)
      nameWithType:
        CSharp: IdentifiedCollection<T>.Remove(UInt16)
        VB: IdentifiedCollection(Of T).Remove(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Remove(System.UInt16)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Remove(System.UInt16)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Remove
        path: ../Imp/IdentifiedCollection.cs
        startLine: 88
      summary: "\nRemoves an object from the collection.\n"
      example: []
      syntax:
        content:
          CSharp: public void Remove(ushort id)
          VB: Public Sub Remove(id As UShort)
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the value to remove.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.Remove(`0)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.Remove(`0)
      language: CSharp
      name:
        CSharp: Remove(T)
        VB: Remove(T)
      nameWithType:
        CSharp: IdentifiedCollection<T>.Remove(T)
        VB: IdentifiedCollection(Of T).Remove(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.Remove(T)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).Remove(T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Remove
        path: ../Imp/IdentifiedCollection.cs
        startLine: 102
      summary: "\nRemoves an object from the collection.\n"
      example: []
      syntax:
        content:
          CSharp: public void Remove(T value)
          VB: Public Sub Remove(value As T)
        parameters:
        - id: value
          type: '{T}'
          description: The value to remove.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue(System.UInt16,`0@)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue(System.UInt16,`0@)
      language: CSharp
      name:
        CSharp: TryGetValue(UInt16, out T)
        VB: TryGetValue(UInt16, ByRef T)
      nameWithType:
        CSharp: IdentifiedCollection<T>.TryGetValue(UInt16, out T)
        VB: IdentifiedCollection(Of T).TryGetValue(UInt16, ByRef T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.TryGetValue(System.UInt16, out T)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).TryGetValue(System.UInt16, ByRef T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: TryGetValue
        path: ../Imp/IdentifiedCollection.cs
        startLine: 117
      summary: "\nAttempts to obtain an object from the collection.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryGetValue(ushort id, out T value)
          VB: Public Function TryGetValue(id As UShort, ByRef value As T) As Boolean
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the value to obtain.
        - id: value
          type: '{T}'
          description: The obtained value.
        return:
          type: System.Boolean
          description: Whether the object was successfully obtained.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID(`0,System.UInt16@)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID(`0,System.UInt16@)
      language: CSharp
      name:
        CSharp: TryGetID(T, out UInt16)
        VB: TryGetID(T, ByRef UInt16)
      nameWithType:
        CSharp: IdentifiedCollection<T>.TryGetID(T, out UInt16)
        VB: IdentifiedCollection(Of T).TryGetID(T, ByRef UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.TryGetID(T, out System.UInt16)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).TryGetID(T, ByRef System.UInt16)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: TryGetID
        path: ../Imp/IdentifiedCollection.cs
        startLine: 128
      summary: "\nAttempts to obtain an object from the collection.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryGetID(T value, out ushort id)
          VB: Public Function TryGetID(value As T, ByRef id As UShort) As Boolean
        parameters:
        - id: value
          type: '{T}'
          description: The value with the ID to obtain.
        - id: id
          type: System.UInt16
          description: The ID of the given value.
        return:
          type: System.Boolean
          description: Whether the ID of the object was successfully obtained.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID(System.UInt16)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID(System.UInt16)
      language: CSharp
      name:
        CSharp: ContainsID(UInt16)
        VB: ContainsID(UInt16)
      nameWithType:
        CSharp: IdentifiedCollection<T>.ContainsID(UInt16)
        VB: IdentifiedCollection(Of T).ContainsID(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.ContainsID(System.UInt16)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).ContainsID(System.UInt16)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ContainsID
        path: ../Imp/IdentifiedCollection.cs
        startLine: 138
      summary: "\nReturns whether the collection contains an object with the specified ID.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ContainsID(ushort id)
          VB: Public Function ContainsID(id As UShort) As Boolean
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the object to lookup.
        return:
          type: System.Boolean
          description: Whether an object with the given ID exists in the collection.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue(`0)
      commentId: M:DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue(`0)
      language: CSharp
      name:
        CSharp: ContainsValue(T)
        VB: ContainsValue(T)
      nameWithType:
        CSharp: IdentifiedCollection<T>.ContainsValue(T)
        VB: IdentifiedCollection(Of T).ContainsValue(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IdentifiedCollection<T>.ContainsValue(T)
        VB: DouglasDwyer.Imp.IdentifiedCollection(Of T).ContainsValue(T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IdentifiedCollection.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ContainsValue
        path: ../Imp/IdentifiedCollection.cs
        startLine: 148
      summary: "\nReturns whether the collection contains the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ContainsValue(T value)
          VB: Public Function ContainsValue(value As T) As Boolean
        parameters:
        - id: value
          type: '{T}'
        return:
          type: System.Boolean
          description: Whether the given object exists in the collection.
      overload: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      System.UInt16: 
  - id: DouglasDwyer.Imp.IImpClient
    commentId: T:DouglasDwyer.Imp.IImpClient
    language: CSharp
    name:
      CSharp: IImpClient
      VB: IImpClient
    nameWithType:
      CSharp: IImpClient
      VB: IImpClient
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IImpClient
      VB: DouglasDwyer.Imp.IImpClient
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IImpClient.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IImpClient
      path: ../Imp/IImpClient.cs
      startLine: 9
    summary: "\nThe base interface by which all <xref href=\"DouglasDwyer.Imp.ImpClient\" data-throw-if-not-resolved=\"false\"></xref> objects are shared across the network.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IImpClient
        VB: Public Interface IImpClient
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.Imp.IImpClient.Server
      commentId: P:DouglasDwyer.Imp.IImpClient.Server
      language: CSharp
      name:
        CSharp: Server
        VB: Server
      nameWithType:
        CSharp: IImpClient.Server
        VB: IImpClient.Server
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IImpClient.Server
        VB: DouglasDwyer.Imp.IImpClient.Server
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Server
        path: ../Imp/IImpClient.cs
        startLine: 14
      summary: "\nThe remote server object, or local server object if this is a server-owned client.\n"
      example: []
      syntax:
        content:
          CSharp: IImpServer Server { get; }
          VB: ReadOnly Property Server As IImpServer
        parameters: []
        return:
          type: DouglasDwyer.Imp.IImpServer
      overload: DouglasDwyer.Imp.IImpClient.Server*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    references:
      DouglasDwyer.Imp.ImpClient: 
  - id: DouglasDwyer.Imp.IImpClient`1
    commentId: T:DouglasDwyer.Imp.IImpClient`1
    language: CSharp
    name:
      CSharp: IImpClient<T>
      VB: IImpClient(Of T)
    nameWithType:
      CSharp: IImpClient<T>
      VB: IImpClient(Of T)
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IImpClient<T>
      VB: DouglasDwyer.Imp.IImpClient(Of T)
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IImpClient.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IImpClient
      path: ../Imp/IImpClient.cs
      startLine: 21
    summary: "\nThe base interface by which all <xref href=\"DouglasDwyer.Imp.ImpClient\" data-throw-if-not-resolved=\"false\"></xref> objects are shared across the network.\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface IImpClient<T> : IImpClient'
        VB: >-
          Public Interface IImpClient(Of T)

              Inherits IImpClient
      typeParameters:
      - id: T
        description: The type of server that this client uses.
    inheritedMembers:
    - DouglasDwyer.Imp.IImpClient.Server
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
    references:
      DouglasDwyer.Imp.ImpClient: 
  - id: DouglasDwyer.Imp.IImpServer
    commentId: T:DouglasDwyer.Imp.IImpServer
    language: CSharp
    name:
      CSharp: IImpServer
      VB: IImpServer
    nameWithType:
      CSharp: IImpServer
      VB: IImpServer
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IImpServer
      VB: DouglasDwyer.Imp.IImpServer
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IImpServer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IImpServer
      path: ../Imp/IImpServer.cs
      startLine: 9
    summary: "\nThe base interface by which all <xref href=\"DouglasDwyer.Imp.ImpServer\" data-throw-if-not-resolved=\"false\"></xref> objects are shared across the network.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IImpServer
        VB: Public Interface IImpServer
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
    references:
      DouglasDwyer.Imp.ImpServer: 
  - id: DouglasDwyer.Imp.IImpServer`1
    commentId: T:DouglasDwyer.Imp.IImpServer`1
    language: CSharp
    name:
      CSharp: IImpServer<T>
      VB: IImpServer(Of T)
    nameWithType:
      CSharp: IImpServer<T>
      VB: IImpServer(Of T)
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IImpServer<T>
      VB: DouglasDwyer.Imp.IImpServer(Of T)
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IImpServer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IImpServer
      path: ../Imp/IImpServer.cs
      startLine: 17
    summary: "\nThe base interface by which all <xref href=\"DouglasDwyer.Imp.ImpServer%601\" data-throw-if-not-resolved=\"false\"></xref> objects are shared across the network.\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface IImpServer<T> : IImpServer'
        VB: >-
          Public Interface IImpServer(Of T)

              Inherits IImpServer
      typeParameters:
      - id: T
        description: The type of client that this server uses.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
    references:
      DouglasDwyer.Imp.ImpServer`1: 
  - id: DouglasDwyer.Imp.ImpClient
    commentId: T:DouglasDwyer.Imp.ImpClient
    language: CSharp
    name:
      CSharp: ImpClient
      VB: ImpClient
    nameWithType:
      CSharp: ImpClient
      VB: ImpClient
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ImpClient
      VB: DouglasDwyer.Imp.ImpClient
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ImpClient.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ImpClient
      path: ../Imp/ImpClient.cs
      startLine: 25
    summary: "\nRepresents a TCP client that can send shared interfaces across the network as references.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Shared]

          public class ImpClient : IImpClient
        VB: >-
          <Shared>

          Public Class ImpClient

              Implements IImpClient
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.Imp.IImpClient
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: DouglasDwyer.Imp.SharedAttribute
      ctor: DouglasDwyer.Imp.SharedAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ImpClient.Server
      commentId: P:DouglasDwyer.Imp.ImpClient.Server
      language: CSharp
      name:
        CSharp: Server
        VB: Server
      nameWithType:
        CSharp: ImpClient.Server
        VB: ImpClient.Server
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Server
        VB: DouglasDwyer.Imp.ImpClient.Server
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Server
        path: ../Imp/ImpClient.cs
        startLine: 31
      summary: "\nThe remote server object, or local server object if this is a server-owned client.\n"
      example: []
      syntax:
        content:
          CSharp: public IImpServer Server { get; }
          VB: Public ReadOnly Property Server As IImpServer
        parameters: []
        return:
          type: DouglasDwyer.Imp.IImpServer
      overload: DouglasDwyer.Imp.ImpClient.Server*
      implements:
      - DouglasDwyer.Imp.IImpClient.Server
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpClient.Serializer
      commentId: P:DouglasDwyer.Imp.ImpClient.Serializer
      language: CSharp
      name:
        CSharp: Serializer
        VB: Serializer
      nameWithType:
        CSharp: ImpClient.Serializer
        VB: ImpClient.Serializer
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Serializer
        VB: DouglasDwyer.Imp.ImpClient.Serializer
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Serializer
        path: ../Imp/ImpClient.cs
        startLine: 36
      summary: "\nThe serializer used to send objects across the network.\n"
      example: []
      syntax:
        content:
          CSharp: public INetworkSerializer Serializer { get; set; }
          VB: Public Property Serializer As INetworkSerializer
        parameters: []
        return:
          type: DouglasDwyer.Imp.INetworkSerializer
      overload: DouglasDwyer.Imp.ImpClient.Serializer*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
      commentId: P:DouglasDwyer.Imp.ImpClient.SharedTypeBinder
      language: CSharp
      name:
        CSharp: SharedTypeBinder
        VB: SharedTypeBinder
      nameWithType:
        CSharp: ImpClient.SharedTypeBinder
        VB: ImpClient.SharedTypeBinder
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
        VB: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: SharedTypeBinder
        path: ../Imp/ImpClient.cs
        startLine: 41
      summary: "\nThe binder used to generate remote interfaces for shared objects.\n"
      example: []
      syntax:
        content:
          CSharp: public IProxyBinder SharedTypeBinder { get; }
          VB: Public ReadOnly Property SharedTypeBinder As IProxyBinder
        parameters: []
        return:
          type: DouglasDwyer.Imp.IProxyBinder
      overload: DouglasDwyer.Imp.ImpClient.SharedTypeBinder*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpClient.Local
      commentId: P:DouglasDwyer.Imp.ImpClient.Local
      language: CSharp
      name:
        CSharp: Local
        VB: Local
      nameWithType:
        CSharp: ImpClient.Local
        VB: ImpClient.Local
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Local
        VB: DouglasDwyer.Imp.ImpClient.Local
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Local
        path: ../Imp/ImpClient.cs
        startLine: 46
      summary: "\nWhether this object is a local, independent client or a server-owned object representing a connection to a remote host.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Local { get; }
          VB: Public ReadOnly Property Local As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: DouglasDwyer.Imp.ImpClient.Local*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpClient.Connected
      commentId: P:DouglasDwyer.Imp.ImpClient.Connected
      language: CSharp
      name:
        CSharp: Connected
        VB: Connected
      nameWithType:
        CSharp: ImpClient.Connected
        VB: ImpClient.Connected
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Connected
        VB: DouglasDwyer.Imp.ImpClient.Connected
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Connected
        path: ../Imp/ImpClient.cs
        startLine: 51
      summary: "\nWhether this object has an active connection to a remote host.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Connected { get; }
          VB: Public ReadOnly Property Connected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: DouglasDwyer.Imp.ImpClient.Connected*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpClient.NetworkID
      commentId: P:DouglasDwyer.Imp.ImpClient.NetworkID
      language: CSharp
      name:
        CSharp: NetworkID
        VB: NetworkID
      nameWithType:
        CSharp: ImpClient.NetworkID
        VB: ImpClient.NetworkID
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.NetworkID
        VB: DouglasDwyer.Imp.ImpClient.NetworkID
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: NetworkID
        path: ../Imp/ImpClient.cs
        startLine: 56
      summary: "\nThe unique network ID of this client, used to identify this client from others connected to a <xref href=\"DouglasDwyer.Imp.ImpServer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort NetworkID { get; }
          VB: Public ReadOnly Property NetworkID As UShort
        parameters: []
        return:
          type: System.UInt16
      overload: DouglasDwyer.Imp.ImpClient.NetworkID*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        DouglasDwyer.Imp.ImpServer: 
    - id: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
      commentId: P:DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
      language: CSharp
      name:
        CSharp: RemoteTaskScheduler
        VB: RemoteTaskScheduler
      nameWithType:
        CSharp: ImpClient.RemoteTaskScheduler
        VB: ImpClient.RemoteTaskScheduler
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
        VB: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: RemoteTaskScheduler
        path: ../Imp/ImpClient.cs
        startLine: 61
      summary: "\nControls the scheduling of remote method/accessor calls. By default, this scheduler is created with the <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> of the thread that creates the client.\n"
      example: []
      syntax:
        content:
          CSharp: public TaskScheduler RemoteTaskScheduler { get; set; }
          VB: Public Property RemoteTaskScheduler As TaskScheduler
        parameters: []
        return:
          type: System.Threading.Tasks.TaskScheduler
      overload: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        System.Threading.SynchronizationContext: 
    - id: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
      commentId: P:DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
      language: CSharp
      name:
        CSharp: MaximumHeldObjects
        VB: MaximumHeldObjects
      nameWithType:
        CSharp: ImpClient.MaximumHeldObjects
        VB: ImpClient.MaximumHeldObjects
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
        VB: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: MaximumHeldObjects
        path: ../Imp/ImpClient.cs
        startLine: 66
      summary: "\nThe maximum number of shared objects that this client will hold for the remote host. If the number of objects sent exceeds this threshold, the connection will be terminated.\n"
      example: []
      syntax:
        content:
          CSharp: public int MaximumHeldObjects { get; set; }
          VB: Public Property MaximumHeldObjects As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
      commentId: P:DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
      language: CSharp
      name:
        CSharp: MaximumRemoteObjects
        VB: MaximumRemoteObjects
      nameWithType:
        CSharp: ImpClient.MaximumRemoteObjects
        VB: ImpClient.MaximumRemoteObjects
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
        VB: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: MaximumRemoteObjects
        path: ../Imp/ImpClient.cs
        startLine: 71
      summary: "\nThe maximum number of remote shared interfaces that this client will hold. If the number of objects received exceeds this threshold, the connection will be terminated.\n"
      example: []
      syntax:
        content:
          CSharp: public int MaximumRemoteObjects { get; set; }
          VB: Public Property MaximumRemoteObjects As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpClient.#ctor
      commentId: M:DouglasDwyer.Imp.ImpClient.#ctor
      language: CSharp
      name:
        CSharp: ImpClient()
        VB: ImpClient()
      nameWithType:
        CSharp: ImpClient.ImpClient()
        VB: ImpClient.ImpClient()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.ImpClient()
        VB: DouglasDwyer.Imp.ImpClient.ImpClient()
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpClient.cs
        startLine: 91
      summary: "\nCreates a new <xref href=\"DouglasDwyer.Imp.ImpClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpClient()
          VB: Public Sub New
      overload: DouglasDwyer.Imp.ImpClient.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.Imp.ImpClient: 
    - id: DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Connect(String, Int32)
        VB: Connect(String, Int32)
      nameWithType:
        CSharp: ImpClient.Connect(String, Int32)
        VB: ImpClient.Connect(String, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Connect(System.String, System.Int32)
        VB: DouglasDwyer.Imp.ImpClient.Connect(System.String, System.Int32)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Connect
        path: ../Imp/ImpClient.cs
        startLine: 142
      summary: "\nAttempts to connect to an ImpServer using the specified IP address and port number.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Connect(string ip, int port)
          VB: Public Overridable Sub Connect(ip As String, port As Integer)
        parameters:
        - id: ip
          type: System.String
          description: The address to connect to.
        - id: port
          type: System.Int32
          description: The port to connect to.
      overload: DouglasDwyer.Imp.ImpClient.Connect*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
      language: CSharp
      name:
        CSharp: Connect(IPAddress, Int32)
        VB: Connect(IPAddress, Int32)
      nameWithType:
        CSharp: ImpClient.Connect(IPAddress, Int32)
        VB: ImpClient.Connect(IPAddress, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress, System.Int32)
        VB: DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress, System.Int32)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Connect
        path: ../Imp/ImpClient.cs
        startLine: 153
      summary: "\nAttempts to connect to an ImpServer using the specified IP address and port number.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Connect(IPAddress ip, int port)
          VB: Public Overridable Sub Connect(ip As IPAddress, port As Integer)
        parameters:
        - id: ip
          type: System.Net.IPAddress
          description: The address to connect to.
        - id: port
          type: System.Int32
          description: The port to connect to.
      overload: DouglasDwyer.Imp.ImpClient.Connect*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: ConnectAsync(String, Int32)
        VB: ConnectAsync(String, Int32)
      nameWithType:
        CSharp: ImpClient.ConnectAsync(String, Int32)
        VB: ImpClient.ConnectAsync(String, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String, System.Int32)
        VB: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String, System.Int32)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ConnectAsync
        path: ../Imp/ImpClient.cs
        startLine: 186
      summary: "\nAttempts to asynchronously connect to an ImpServer using the specified IP address and port number.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Task ConnectAsync(string ip, int port)
          VB: Public Overridable Function ConnectAsync(ip As String, port As Integer) As Task
        parameters:
        - id: ip
          type: System.String
          description: The address to connect to.
        - id: port
          type: System.Int32
          description: The port to connect to.
        return:
          type: System.Threading.Tasks.Task
          description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object representing the current state of the operation.
      overload: DouglasDwyer.Imp.ImpClient.ConnectAsync*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        System.Threading.Tasks.Task: 
    - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
      language: CSharp
      name:
        CSharp: ConnectAsync(IPAddress, Int32)
        VB: ConnectAsync(IPAddress, Int32)
      nameWithType:
        CSharp: ImpClient.ConnectAsync(IPAddress, Int32)
        VB: ImpClient.ConnectAsync(IPAddress, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress, System.Int32)
        VB: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress, System.Int32)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ConnectAsync
        path: ../Imp/ImpClient.cs
        startLine: 202
      summary: "\nAttempts to asynchronously connect to an ImpServer using the specified IP address and port number.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Task ConnectAsync(IPAddress ip, int port)
          VB: Public Overridable Function ConnectAsync(ip As IPAddress, port As Integer) As Task
        parameters:
        - id: ip
          type: System.Net.IPAddress
          description: The address to connect to.
        - id: port
          type: System.Int32
          description: The port to connect to.
        return:
          type: System.Threading.Tasks.Task
          description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object representing the current state of the operation.
      overload: DouglasDwyer.Imp.ImpClient.ConnectAsync*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        System.Threading.Tasks.Task: 
    - id: DouglasDwyer.Imp.ImpClient.Disconnect
      commentId: M:DouglasDwyer.Imp.ImpClient.Disconnect
      language: CSharp
      name:
        CSharp: Disconnect()
        VB: Disconnect()
      nameWithType:
        CSharp: ImpClient.Disconnect()
        VB: ImpClient.Disconnect()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.Disconnect()
        VB: DouglasDwyer.Imp.ImpClient.Disconnect()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Disconnect
        path: ../Imp/ImpClient.cs
        startLine: 276
      summary: "\nDisconnects from the remote host, ending communication between the server and the client.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Disconnect()
          VB: Public Overridable Sub Disconnect
      overload: DouglasDwyer.Imp.ImpClient.Disconnect*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
      commentId: M:DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
      language: CSharp
      name:
        CSharp: OnNetworkError(Exception)
        VB: OnNetworkError(Exception)
      nameWithType:
        CSharp: ImpClient.OnNetworkError(Exception)
        VB: ImpClient.OnNetworkError(Exception)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
        VB: DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnNetworkError
        path: ../Imp/ImpClient.cs
        startLine: 494
      summary: "\nCalled whenever this client is disconnected from the server due to an exception in networking code.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnNetworkError(Exception exception)
          VB: Protected Overridable Sub OnNetworkError(exception As Exception)
        parameters:
        - id: exception
          type: System.Exception
          description: The exception that was thrown.
      overload: DouglasDwyer.Imp.ImpClient.OnNetworkError*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.Imp.ImpClient.OnDisconnected
      commentId: M:DouglasDwyer.Imp.ImpClient.OnDisconnected
      language: CSharp
      name:
        CSharp: OnDisconnected()
        VB: OnDisconnected()
      nameWithType:
        CSharp: ImpClient.OnDisconnected()
        VB: ImpClient.OnDisconnected()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient.OnDisconnected()
        VB: DouglasDwyer.Imp.ImpClient.OnDisconnected()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnDisconnected
        path: ../Imp/ImpClient.cs
        startLine: 505
      summary: "\nCalled whenever this client disconnects from the server.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnDisconnected()
          VB: Protected Overridable Sub OnDisconnected
      overload: DouglasDwyer.Imp.ImpClient.OnDisconnected*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: DouglasDwyer.Imp.ImpClient`1
    commentId: T:DouglasDwyer.Imp.ImpClient`1
    language: CSharp
    name:
      CSharp: ImpClient<T>
      VB: ImpClient(Of T)
    nameWithType:
      CSharp: ImpClient<T>
      VB: ImpClient(Of T)
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ImpClient<T>
      VB: DouglasDwyer.Imp.ImpClient(Of T)
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ImpClient.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ImpClient
      path: ../Imp/ImpClient.cs
      startLine: 958
    summary: "\nRepresents a TCP client that can send shared interfaces across the network as references.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ImpClient<T> : ImpClient, IImpClient<T>, IImpClient where T : IImpServer'
        VB: >-
          Public Class ImpClient(Of T As IImpServer)

              Inherits ImpClient

              Implements IImpClient(Of T), IImpClient
      typeParameters:
      - id: T
        description: The shared interface type of the server to which this client will connect.
    inheritance:
    - System.Object
    - DouglasDwyer.Imp.ImpClient
    implements:
    - DouglasDwyer.Imp.IImpClient{{T}}
    - DouglasDwyer.Imp.IImpClient
    inheritedMembers:
    - DouglasDwyer.Imp.ImpClient.Serializer
    - DouglasDwyer.Imp.ImpClient.SharedTypeBinder
    - DouglasDwyer.Imp.ImpClient.Local
    - DouglasDwyer.Imp.ImpClient.Connected
    - DouglasDwyer.Imp.ImpClient.NetworkID
    - DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
    - DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
    - DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
    - DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
    - DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
    - DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
    - DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
    - DouglasDwyer.Imp.ImpClient.Disconnect
    - DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
    - DouglasDwyer.Imp.ImpClient.OnDisconnected
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ImpClient`1.Server
      commentId: P:DouglasDwyer.Imp.ImpClient`1.Server
      language: CSharp
      name:
        CSharp: Server
        VB: Server
      nameWithType:
        CSharp: ImpClient<T>.Server
        VB: ImpClient(Of T).Server
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpClient<T>.Server
        VB: DouglasDwyer.Imp.ImpClient(Of T).Server
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Server
        path: ../Imp/ImpClient.cs
        startLine: 963
      summary: "\nThe remote server object, or local server object if this is a server-owned client.\n"
      example: []
      syntax:
        content:
          CSharp: public T Server { get; }
          VB: Public ReadOnly Property Server As T
        parameters: []
        return:
          type: '{T}'
      overload: DouglasDwyer.Imp.ImpClient`1.Server*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: DouglasDwyer.Imp.ImpPowerSerializer
    commentId: T:DouglasDwyer.Imp.ImpPowerSerializer
    language: CSharp
    name:
      CSharp: ImpPowerSerializer
      VB: ImpPowerSerializer
    nameWithType:
      CSharp: ImpPowerSerializer
      VB: ImpPowerSerializer
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ImpPowerSerializer
      VB: DouglasDwyer.Imp.ImpPowerSerializer
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ImpPowerSerializer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ImpPowerSerializer
      path: ../Imp/ImpPowerSerializer.cs
      startLine: 13
    summary: "\nRepresents a serializer that can serialize/deserialize shared interface references as well as complex object value graphs.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ImpPowerSerializer : PowerSerializer, INetworkSerializer, ICloneable'
        VB: >-
          Public Class ImpPowerSerializer

              Inherits PowerSerializer

              Implements INetworkSerializer, ICloneable
    inheritance:
    - System.Object
    - DouglasDwyer.PowerSerializer.PowerSerializer
    implements:
    - DouglasDwyer.Imp.INetworkSerializer
    - System.ICloneable
    inheritedMembers:
    - DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
    - DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
    - DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
    - DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
    - DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
    - DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
    - DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
    - DouglasDwyer.PowerSerializer.PowerSerializer.Clone
    - DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ImpPowerSerializer.Client
      commentId: P:DouglasDwyer.Imp.ImpPowerSerializer.Client
      language: CSharp
      name:
        CSharp: Client
        VB: Client
      nameWithType:
        CSharp: ImpPowerSerializer.Client
        VB: ImpPowerSerializer.Client
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.Client
        VB: DouglasDwyer.Imp.ImpPowerSerializer.Client
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Client
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 15
      syntax:
        content:
          CSharp: public ImpClient Client { get; set; }
          VB: Public Property Client As ImpClient
        parameters: []
        return:
          type: DouglasDwyer.Imp.ImpClient
      overload: DouglasDwyer.Imp.ImpPowerSerializer.Client*
      implements:
      - DouglasDwyer.Imp.INetworkSerializer.Client
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.#ctor
      language: CSharp
      name:
        CSharp: ImpPowerSerializer()
        VB: ImpPowerSerializer()
      nameWithType:
        CSharp: ImpPowerSerializer.ImpPowerSerializer()
        VB: ImpPowerSerializer.ImpPowerSerializer()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer()
        VB: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer()
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 20
      summary: "\nCreates a new serializer that is not associated with a client.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpPowerSerializer()
          VB: Public Sub New
      overload: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.Imp.ImpClient)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.Imp.ImpClient)
      language: CSharp
      name:
        CSharp: ImpPowerSerializer(ImpClient)
        VB: ImpPowerSerializer(ImpClient)
      nameWithType:
        CSharp: ImpPowerSerializer.ImpPowerSerializer(ImpClient)
        VB: ImpPowerSerializer.ImpPowerSerializer(ImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.Imp.ImpClient)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.Imp.ImpClient)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 26
      summary: "\nCreates a new serializer associated with the given client.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpPowerSerializer(ImpClient client)
          VB: Public Sub New(client As ImpClient)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.ImpClient
          description: The client to employ when serializing shared interfaces.
      overload: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.PowerSerializer.ITypeResolver)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.PowerSerializer.ITypeResolver)
      language: CSharp
      name:
        CSharp: ImpPowerSerializer(ITypeResolver)
        VB: ImpPowerSerializer(ITypeResolver)
      nameWithType:
        CSharp: ImpPowerSerializer.ImpPowerSerializer(ITypeResolver)
        VB: ImpPowerSerializer.ImpPowerSerializer(ITypeResolver)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.PowerSerializer.ITypeResolver)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.PowerSerializer.ITypeResolver)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 34
      summary: "\nCreates a new serializer that is not associated with a client.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpPowerSerializer(ITypeResolver resolver)
          VB: Public Sub New(resolver As ITypeResolver)
        parameters:
        - id: resolver
          type: DouglasDwyer.PowerSerializer.ITypeResolver
          description: The type resolver to use during serialization.
      overload: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.Imp.ImpClient,DouglasDwyer.PowerSerializer.ITypeResolver)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.#ctor(DouglasDwyer.Imp.ImpClient,DouglasDwyer.PowerSerializer.ITypeResolver)
      language: CSharp
      name:
        CSharp: ImpPowerSerializer(ImpClient, ITypeResolver)
        VB: ImpPowerSerializer(ImpClient, ITypeResolver)
      nameWithType:
        CSharp: ImpPowerSerializer.ImpPowerSerializer(ImpClient, ITypeResolver)
        VB: ImpPowerSerializer.ImpPowerSerializer(ImpClient, ITypeResolver)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.Imp.ImpClient, DouglasDwyer.PowerSerializer.ITypeResolver)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer(DouglasDwyer.Imp.ImpClient, DouglasDwyer.PowerSerializer.ITypeResolver)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 41
      summary: "\nCreates a new serializer associated with the given client.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpPowerSerializer(ImpClient client, ITypeResolver resolver)
          VB: Public Sub New(client As ImpClient, resolver As ITypeResolver)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.ImpClient
          description: The client to employ when serializing shared interfaces.
        - id: resolver
          type: DouglasDwyer.PowerSerializer.ITypeResolver
          description: The type resolver to use during serialization.
      overload: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpPowerSerializer.Serialize(System.Object)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.Serialize(System.Object)
      language: CSharp
      name:
        CSharp: Serialize(Object)
        VB: Serialize(Object)
      nameWithType:
        CSharp: ImpPowerSerializer.Serialize(Object)
        VB: ImpPowerSerializer.Serialize(Object)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.Serialize(System.Object)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.Serialize(System.Object)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Serialize
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 45
      syntax:
        content:
          CSharp: public override byte[] Serialize(object obj)
          VB: Public Overrides Function Serialize(obj As Object) As Byte()
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Byte[]
      overload: DouglasDwyer.Imp.ImpPowerSerializer.Serialize*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
      implements:
      - DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize(System.Byte[])
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.Deserialize(System.Byte[])
      language: CSharp
      name:
        CSharp: Deserialize(Byte[])
        VB: Deserialize(Byte())
      nameWithType:
        CSharp: ImpPowerSerializer.Deserialize(Byte[])
        VB: ImpPowerSerializer.Deserialize(Byte())
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize(System.Byte[])
        VB: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize(System.Byte())
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Deserialize
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 147
      syntax:
        content:
          CSharp: public override object Deserialize(byte[] data)
          VB: Public Overrides Function Deserialize(data As Byte()) As Object
        parameters:
        - id: data
          type: System.Byte[]
        return:
          type: System.Object
      overload: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
      implements:
      - DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
      language: CSharp
      name:
        CSharp: SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
        VB: SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
      nameWithType:
        CSharp: ImpPowerSerializer.SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
        VB: ImpPowerSerializer.SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object, System.Type)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object, System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: SerializeObject
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 178
      syntax:
        content:
          CSharp: protected override void SerializeObject(PowerSerializationContext context, BinaryWriter writer, object obj, Type type)
          VB: Protected Overrides Sub SerializeObject(context As PowerSerializationContext, writer As BinaryWriter, obj As Object, type As Type)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerSerializationContext
        - id: writer
          type: System.IO.BinaryWriter
        - id: obj
          type: System.Object
        - id: type
          type: System.Type
      overload: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
      language: CSharp
      name:
        CSharp: DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
        VB: DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
      nameWithType:
        CSharp: ImpPowerSerializer.DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
        VB: ImpPowerSerializer.DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Object, System.Type)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Object, System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DeserializeObject
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 186
      syntax:
        content:
          CSharp: protected override void DeserializeObject(PowerDeserializationContext context, BinaryReader reader, object obj, Type type)
          VB: Protected Overrides Sub DeserializeObject(context As PowerDeserializationContext, reader As BinaryReader, obj As Object, type As Type)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        - id: reader
          type: System.IO.BinaryReader
        - id: obj
          type: System.Object
        - id: type
          type: System.Type
      overload: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
      language: CSharp
      name:
        CSharp: WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
        VB: WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
      nameWithType:
        CSharp: ImpPowerSerializer.WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
        VB: ImpPowerSerializer.WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: WriteObjectReference
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 194
      syntax:
        content:
          CSharp: protected override void WriteObjectReference(PowerSerializationContext context, BinaryWriter writer, object obj)
          VB: Protected Overrides Sub WriteObjectReference(context As PowerSerializationContext, writer As BinaryWriter, obj As Object)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerSerializationContext
        - id: writer
          type: System.IO.BinaryWriter
        - id: obj
          type: System.Object
      overload: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
      language: CSharp
      name:
        CSharp: ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
        VB: ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
      nameWithType:
        CSharp: ImpPowerSerializer.ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
        VB: ImpPowerSerializer.ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Type)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ReadAndCreateObject
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 250
      syntax:
        content:
          CSharp: protected override object ReadAndCreateObject(PowerDeserializationContext context, BinaryReader reader, Type type)
          VB: Protected Overrides Function ReadAndCreateObject(context As PowerDeserializationContext, reader As BinaryReader, type As Type) As Object
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        - id: reader
          type: System.IO.BinaryReader
        - id: type
          type: System.Type
        return:
          type: System.Object
      overload: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance(System.Type)
      commentId: M:DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance(System.Type)
      language: CSharp
      name:
        CSharp: CheckTypeAllowance(Type)
        VB: CheckTypeAllowance(Type)
      nameWithType:
        CSharp: ImpPowerSerializer.CheckTypeAllowance(Type)
        VB: ImpPowerSerializer.CheckTypeAllowance(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance(System.Type)
        VB: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpPowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: CheckTypeAllowance
        path: ../Imp/ImpPowerSerializer.cs
        startLine: 269
      syntax:
        content:
          CSharp: protected override void CheckTypeAllowance(Type type)
          VB: Protected Overrides Sub CheckTypeAllowance(type As Type)
        parameters:
        - id: type
          type: System.Type
      overload: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance*
      overridden: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: DouglasDwyer.Imp.ImpServer
    commentId: T:DouglasDwyer.Imp.ImpServer
    language: CSharp
    name:
      CSharp: ImpServer
      VB: ImpServer
    nameWithType:
      CSharp: ImpServer
      VB: ImpServer
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ImpServer
      VB: DouglasDwyer.Imp.ImpServer
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ImpServer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ImpServer
      path: ../Imp/ImpServer.cs
      startLine: 21
    summary: "\nRepresents a TCP server that can send shared interfaces across the network as references.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Shared]

          public class ImpServer : IImpServer
        VB: >-
          <Shared>

          Public Class ImpServer

              Implements IImpServer
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.Imp.IImpServer
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: DouglasDwyer.Imp.SharedAttribute
      ctor: DouglasDwyer.Imp.SharedAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ImpServer.ConnectedClients
      commentId: P:DouglasDwyer.Imp.ImpServer.ConnectedClients
      language: CSharp
      name:
        CSharp: ConnectedClients
        VB: ConnectedClients
      nameWithType:
        CSharp: ImpServer.ConnectedClients
        VB: ImpServer.ConnectedClients
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.ConnectedClients
        VB: DouglasDwyer.Imp.ImpServer.ConnectedClients
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ConnectedClients
        path: ../Imp/ImpServer.cs
        startLine: 27
      summary: "\nReturns a list of all the clients currently connected to this server.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<IImpClient> ConnectedClients { get; }
          VB: Public ReadOnly Property ConnectedClients As IList(Of IImpClient)
        parameters: []
        return:
          type: System.Collections.Generic.IList{DouglasDwyer.Imp.IImpClient}
      overload: DouglasDwyer.Imp.ImpServer.ConnectedClients*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
      commentId: P:DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
      language: CSharp
      name:
        CSharp: DefaultProxyBinder
        VB: DefaultProxyBinder
      nameWithType:
        CSharp: ImpServer.DefaultProxyBinder
        VB: ImpServer.DefaultProxyBinder
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
        VB: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DefaultProxyBinder
        path: ../Imp/ImpServer.cs
        startLine: 32
      summary: "\nThe default shared type binder utilized when creating new clients.\n"
      example: []
      syntax:
        content:
          CSharp: public IProxyBinder DefaultProxyBinder { get; set; }
          VB: Public Property DefaultProxyBinder As IProxyBinder
        parameters: []
        return:
          type: DouglasDwyer.Imp.IProxyBinder
      overload: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.DefaultSerializer
      commentId: P:DouglasDwyer.Imp.ImpServer.DefaultSerializer
      language: CSharp
      name:
        CSharp: DefaultSerializer
        VB: DefaultSerializer
      nameWithType:
        CSharp: ImpServer.DefaultSerializer
        VB: ImpServer.DefaultSerializer
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.DefaultSerializer
        VB: DouglasDwyer.Imp.ImpServer.DefaultSerializer
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DefaultSerializer
        path: ../Imp/ImpServer.cs
        startLine: 37
      summary: "\nThe default network serializer utilized when creating new clients.\n"
      example: []
      syntax:
        content:
          CSharp: public INetworkSerializer DefaultSerializer { get; set; }
          VB: Public Property DefaultSerializer As INetworkSerializer
        parameters: []
        return:
          type: DouglasDwyer.Imp.INetworkSerializer
      overload: DouglasDwyer.Imp.ImpServer.DefaultSerializer*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
      commentId: P:DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
      language: CSharp
      name:
        CSharp: DefaultRemoteTaskScheduler
        VB: DefaultRemoteTaskScheduler
      nameWithType:
        CSharp: ImpServer.DefaultRemoteTaskScheduler
        VB: ImpServer.DefaultRemoteTaskScheduler
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
        VB: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DefaultRemoteTaskScheduler
        path: ../Imp/ImpServer.cs
        startLine: 42
      summary: "\nThe default remote task scheduler utilized when creating new clients.\n"
      example: []
      syntax:
        content:
          CSharp: public TaskScheduler DefaultRemoteTaskScheduler { get; set; }
          VB: Public Property DefaultRemoteTaskScheduler As TaskScheduler
        parameters: []
        return:
          type: System.Threading.Tasks.TaskScheduler
      overload: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
      commentId: P:DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
      language: CSharp
      name:
        CSharp: DefaultMaximumHeldObjects
        VB: DefaultMaximumHeldObjects
      nameWithType:
        CSharp: ImpServer.DefaultMaximumHeldObjects
        VB: ImpServer.DefaultMaximumHeldObjects
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
        VB: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DefaultMaximumHeldObjects
        path: ../Imp/ImpServer.cs
        startLine: 47
      summary: "\nThe maximum number of shared objects that each client should hold for its remote host. If the number of objects sent exceeds this threshold, the connection will be terminated.\n"
      example: []
      syntax:
        content:
          CSharp: public int DefaultMaximumHeldObjects { get; set; }
          VB: Public Property DefaultMaximumHeldObjects As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
      commentId: P:DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
      language: CSharp
      name:
        CSharp: DefaultMaximumRemoteObjects
        VB: DefaultMaximumRemoteObjects
      nameWithType:
        CSharp: ImpServer.DefaultMaximumRemoteObjects
        VB: ImpServer.DefaultMaximumRemoteObjects
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
        VB: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: DefaultMaximumRemoteObjects
        path: ../Imp/ImpServer.cs
        startLine: 52
      summary: "\nThe maximum number of remote shared interfaces that each client should hold. If the number of objects received exceeds this threshold, the connection will be terminated.\n"
      example: []
      syntax:
        content:
          CSharp: public int DefaultMaximumRemoteObjects { get; set; }
          VB: Public Property DefaultMaximumRemoteObjects As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
      commentId: P:DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
      language: CSharp
      name:
        CSharp: MaximumConnectedClients
        VB: MaximumConnectedClients
      nameWithType:
        CSharp: ImpServer.MaximumConnectedClients
        VB: ImpServer.MaximumConnectedClients
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
        VB: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: MaximumConnectedClients
        path: ../Imp/ImpServer.cs
        startLine: 57
      summary: "\nThe maximum number of clients that can be concurrently connected to the server.\n"
      example: []
      syntax:
        content:
          CSharp: public int MaximumConnectedClients { get; set; }
          VB: Public Property MaximumConnectedClients As Integer
        parameters: []
        return:
          type: System.Int32
      overload: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.#ctor(System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpServer.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: ImpServer(Int32)
        VB: ImpServer(Int32)
      nameWithType:
        CSharp: ImpServer.ImpServer(Int32)
        VB: ImpServer.ImpServer(Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.ImpServer(System.Int32)
        VB: DouglasDwyer.Imp.ImpServer.ImpServer(System.Int32)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 68
      summary: "\nCreates a new server bound to the specified port. The server will listen for connections on all IP addresses.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(int port)
          VB: Public Sub New(port As Integer)
        parameters:
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
      overload: DouglasDwyer.Imp.ImpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.#ctor(System.Net.IPAddress,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpServer.#ctor(System.Net.IPAddress,System.Int32)
      language: CSharp
      name:
        CSharp: ImpServer(IPAddress, Int32)
        VB: ImpServer(IPAddress, Int32)
      nameWithType:
        CSharp: ImpServer.ImpServer(IPAddress, Int32)
        VB: ImpServer.ImpServer(IPAddress, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.ImpServer(System.Net.IPAddress, System.Int32)
        VB: DouglasDwyer.Imp.ImpServer.ImpServer(System.Net.IPAddress, System.Int32)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 75
      summary: "\nCreates a new server bound to the specified IP address and port.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(IPAddress binding, int port)
          VB: Public Sub New(binding As IPAddress, port As Integer)
        parameters:
        - id: binding
          type: System.Net.IPAddress
          description: The IP address on which to listen for incoming connections.
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
      overload: DouglasDwyer.Imp.ImpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.#ctor(System.Net.IPAddress,System.Int32,DouglasDwyer.Imp.INetworkSerializer,DouglasDwyer.Imp.IProxyBinder)
      commentId: M:DouglasDwyer.Imp.ImpServer.#ctor(System.Net.IPAddress,System.Int32,DouglasDwyer.Imp.INetworkSerializer,DouglasDwyer.Imp.IProxyBinder)
      language: CSharp
      name:
        CSharp: ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
        VB: ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
      nameWithType:
        CSharp: ImpServer.ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
        VB: ImpServer.ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.ImpServer(System.Net.IPAddress, System.Int32, DouglasDwyer.Imp.INetworkSerializer, DouglasDwyer.Imp.IProxyBinder)
        VB: DouglasDwyer.Imp.ImpServer.ImpServer(System.Net.IPAddress, System.Int32, DouglasDwyer.Imp.INetworkSerializer, DouglasDwyer.Imp.IProxyBinder)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 84
      summary: "\nCreates a new server bound to the specified IP address and port. The server will employ the given serializer and shared type binder when creating new clients and sending interfaces across the network.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(IPAddress binding, int port, INetworkSerializer defaultSerializer, IProxyBinder binder)
          VB: Public Sub New(binding As IPAddress, port As Integer, defaultSerializer As INetworkSerializer, binder As IProxyBinder)
        parameters:
        - id: binding
          type: System.Net.IPAddress
          description: The IP address on which to listen for incoming connections.
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
        - id: defaultSerializer
          type: DouglasDwyer.Imp.INetworkSerializer
          description: The default serializer that clients should use when sending interfaces across the network.
        - id: binder
          type: DouglasDwyer.Imp.IProxyBinder
          description: The default shared type binder that clients should use when sending interfaces across the network.
      overload: DouglasDwyer.Imp.ImpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer.Start
      commentId: M:DouglasDwyer.Imp.ImpServer.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: ImpServer.Start()
        VB: ImpServer.Start()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.Start()
        VB: DouglasDwyer.Imp.ImpServer.Start()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Start
        path: ../Imp/ImpServer.cs
        startLine: 107
      summary: "\nStarts the server and begins listening for incoming connections/unreliable packets.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Start()
          VB: Public Overridable Sub Start
      overload: DouglasDwyer.Imp.ImpServer.Start*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer.Stop
      commentId: M:DouglasDwyer.Imp.ImpServer.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: ImpServer.Stop()
        VB: ImpServer.Stop()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.Stop()
        VB: DouglasDwyer.Imp.ImpServer.Stop()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Stop
        path: ../Imp/ImpServer.cs
        startLine: 118
      summary: "\nStops the server, disconnects all connected clients, and ceases to listen for new connections or unreliable packets.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void Stop()
          VB: Public Overridable Sub Stop
      overload: DouglasDwyer.Imp.ImpServer.Stop*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
      commentId: M:DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
      language: CSharp
      name:
        CSharp: OnClientConnected(IImpClient)
        VB: OnClientConnected(IImpClient)
      nameWithType:
        CSharp: ImpServer.OnClientConnected(IImpClient)
        VB: ImpServer.OnClientConnected(IImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
        VB: DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientConnected
        path: ../Imp/ImpServer.cs
        startLine: 133
      summary: "\nCalled whenever a new client connects to the server.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientConnected(IImpClient client)
          VB: Protected Overridable Sub OnClientConnected(client As IImpClient)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.IImpClient
          description: The client that has connected.
      overload: DouglasDwyer.Imp.ImpServer.OnClientConnected*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
      commentId: M:DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
      language: CSharp
      name:
        CSharp: OnClientNetworkError(IImpClient, Exception)
        VB: OnClientNetworkError(IImpClient, Exception)
      nameWithType:
        CSharp: ImpServer.OnClientNetworkError(IImpClient, Exception)
        VB: ImpServer.OnClientNetworkError(IImpClient, Exception)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient, System.Exception)
        VB: DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient, System.Exception)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientNetworkError
        path: ../Imp/ImpServer.cs
        startLine: 140
      summary: "\nCalled whenever a client is disconnected from the server due to an exception in networking code.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientNetworkError(IImpClient client, Exception exception)
          VB: Protected Overridable Sub OnClientNetworkError(client As IImpClient, exception As Exception)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.IImpClient
          description: The client that has been disconnected.
        - id: exception
          type: System.Exception
          description: The exception that was thrown.
      overload: DouglasDwyer.Imp.ImpServer.OnClientNetworkError*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
      commentId: M:DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
      language: CSharp
      name:
        CSharp: OnClientDisconnected(IImpClient)
        VB: OnClientDisconnected(IImpClient)
      nameWithType:
        CSharp: ImpServer.OnClientDisconnected(IImpClient)
        VB: ImpServer.OnClientDisconnected(IImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
        VB: DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientDisconnected
        path: ../Imp/ImpServer.cs
        startLine: 146
      summary: "\nCalled whenever a client disconnects from the server.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientDisconnected(IImpClient client)
          VB: Protected Overridable Sub OnClientDisconnected(client As IImpClient)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.IImpClient
          description: The client that has been disconnected.
      overload: DouglasDwyer.Imp.ImpServer.OnClientDisconnected*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: DouglasDwyer.Imp.ImpServer`1
    commentId: T:DouglasDwyer.Imp.ImpServer`1
    language: CSharp
    name:
      CSharp: ImpServer<T>
      VB: ImpServer(Of T)
    nameWithType:
      CSharp: ImpServer<T>
      VB: ImpServer(Of T)
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ImpServer<T>
      VB: DouglasDwyer.Imp.ImpServer(Of T)
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ImpServer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ImpServer
      path: ../Imp/ImpServer.cs
      startLine: 226
    summary: "\nRepresents a TCP server that can send shared interfaces across the network as references.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Shared]

          public class ImpServer<T> : ImpServer, IImpServer<T>, IImpServer where T : IImpClient
        VB: >-
          <Shared>

          Public Class ImpServer(Of T As IImpClient)

              Inherits ImpServer

              Implements IImpServer(Of T), IImpServer
      typeParameters:
      - id: T
        description: The type of <xref href="DouglasDwyer.Imp.IImpClient" data-throw-if-not-resolved="false"></xref> with which this server works. Clients whose shared interface does not derive from this type will not be able to connect.
    inheritance:
    - System.Object
    - DouglasDwyer.Imp.ImpServer
    implements:
    - DouglasDwyer.Imp.IImpServer{{T}}
    - DouglasDwyer.Imp.IImpServer
    inheritedMembers:
    - DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
    - DouglasDwyer.Imp.ImpServer.DefaultSerializer
    - DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
    - DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
    - DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
    - DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
    - DouglasDwyer.Imp.ImpServer.Start
    - DouglasDwyer.Imp.ImpServer.Stop
    - DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
    - DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
    - DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: DouglasDwyer.Imp.SharedAttribute
      ctor: DouglasDwyer.Imp.SharedAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ImpServer`1.ConnectedClients
      commentId: P:DouglasDwyer.Imp.ImpServer`1.ConnectedClients
      language: CSharp
      name:
        CSharp: ConnectedClients
        VB: ConnectedClients
      nameWithType:
        CSharp: ImpServer<T>.ConnectedClients
        VB: ImpServer(Of T).ConnectedClients
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.ConnectedClients
        VB: DouglasDwyer.Imp.ImpServer(Of T).ConnectedClients
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ConnectedClients
        path: ../Imp/ImpServer.cs
        startLine: 232
      summary: "\nReturns a list of all the clients currently connected to this server.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<T> ConnectedClients { get; }
          VB: Public ReadOnly Property ConnectedClients As IList(Of T)
        parameters: []
        return:
          type: System.Collections.Generic.IList{{T}}
      overload: DouglasDwyer.Imp.ImpServer`1.ConnectedClients*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ImpServer`1.#ctor(System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: ImpServer(Int32)
        VB: ImpServer(Int32)
      nameWithType:
        CSharp: ImpServer<T>.ImpServer(Int32)
        VB: ImpServer(Of T).ImpServer(Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.ImpServer(System.Int32)
        VB: DouglasDwyer.Imp.ImpServer(Of T).ImpServer(System.Int32)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 239
      summary: "\nCreates a new server bound to the specified port. The server will listen for connections on all IP addresses.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(int port)
          VB: Public Sub New(port As Integer)
        parameters:
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
      overload: DouglasDwyer.Imp.ImpServer`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer`1.#ctor(System.Net.IPAddress,System.Int32)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.#ctor(System.Net.IPAddress,System.Int32)
      language: CSharp
      name:
        CSharp: ImpServer(IPAddress, Int32)
        VB: ImpServer(IPAddress, Int32)
      nameWithType:
        CSharp: ImpServer<T>.ImpServer(IPAddress, Int32)
        VB: ImpServer(Of T).ImpServer(IPAddress, Int32)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.ImpServer(System.Net.IPAddress, System.Int32)
        VB: DouglasDwyer.Imp.ImpServer(Of T).ImpServer(System.Net.IPAddress, System.Int32)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 246
      summary: "\nCreates a new server bound to the specified IP address and port.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(IPAddress binding, int port)
          VB: Public Sub New(binding As IPAddress, port As Integer)
        parameters:
        - id: binding
          type: System.Net.IPAddress
          description: The IP address on which to listen for incoming connections.
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
      overload: DouglasDwyer.Imp.ImpServer`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer`1.#ctor(System.Net.IPAddress,System.Int32,DouglasDwyer.Imp.INetworkSerializer,DouglasDwyer.Imp.IProxyBinder)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.#ctor(System.Net.IPAddress,System.Int32,DouglasDwyer.Imp.INetworkSerializer,DouglasDwyer.Imp.IProxyBinder)
      language: CSharp
      name:
        CSharp: ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
        VB: ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
      nameWithType:
        CSharp: ImpServer<T>.ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
        VB: ImpServer(Of T).ImpServer(IPAddress, Int32, INetworkSerializer, IProxyBinder)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.ImpServer(System.Net.IPAddress, System.Int32, DouglasDwyer.Imp.INetworkSerializer, DouglasDwyer.Imp.IProxyBinder)
        VB: DouglasDwyer.Imp.ImpServer(Of T).ImpServer(System.Net.IPAddress, System.Int32, DouglasDwyer.Imp.INetworkSerializer, DouglasDwyer.Imp.IProxyBinder)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ImpServer.cs
        startLine: 255
      summary: "\nCreates a new server bound to the specified IP address and port. The server will employ the given serializer and shared type binder when creating new clients and sending interfaces across the network.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpServer(IPAddress binding, int port, INetworkSerializer defaultSerializer, IProxyBinder binder)
          VB: Public Sub New(binding As IPAddress, port As Integer, defaultSerializer As INetworkSerializer, binder As IProxyBinder)
        parameters:
        - id: binding
          type: System.Net.IPAddress
          description: The IP address on which to listen for incoming connections.
        - id: port
          type: System.Int32
          description: The port on which to listen for incoming connections.
        - id: defaultSerializer
          type: DouglasDwyer.Imp.INetworkSerializer
          description: The default serializer that clients should use when sending interfaces across the network.
        - id: binder
          type: DouglasDwyer.Imp.IProxyBinder
          description: The default shared type binder that clients should use when sending interfaces across the network.
      overload: DouglasDwyer.Imp.ImpServer`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ImpServer`1.OnClientConnected(`0)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.OnClientConnected(`0)
      language: CSharp
      name:
        CSharp: OnClientConnected(T)
        VB: OnClientConnected(T)
      nameWithType:
        CSharp: ImpServer<T>.OnClientConnected(T)
        VB: ImpServer(Of T).OnClientConnected(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.OnClientConnected(T)
        VB: DouglasDwyer.Imp.ImpServer(Of T).OnClientConnected(T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientConnected
        path: ../Imp/ImpServer.cs
        startLine: 261
      summary: "\nCalled whenever a new client connects to the server.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientConnected(T client)
          VB: Protected Overridable Sub OnClientConnected(client As T)
        parameters:
        - id: client
          type: '{T}'
          description: The client that has connected.
      overload: DouglasDwyer.Imp.ImpServer`1.OnClientConnected*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError(`0,System.Exception)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError(`0,System.Exception)
      language: CSharp
      name:
        CSharp: OnClientNetworkError(T, Exception)
        VB: OnClientNetworkError(T, Exception)
      nameWithType:
        CSharp: ImpServer<T>.OnClientNetworkError(T, Exception)
        VB: ImpServer(Of T).OnClientNetworkError(T, Exception)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.OnClientNetworkError(T, System.Exception)
        VB: DouglasDwyer.Imp.ImpServer(Of T).OnClientNetworkError(T, System.Exception)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientNetworkError
        path: ../Imp/ImpServer.cs
        startLine: 268
      summary: "\nCalled whenever a client is disconnected from the server due to an exception in networking code.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientNetworkError(T client, Exception exception)
          VB: Protected Overridable Sub OnClientNetworkError(client As T, exception As Exception)
        parameters:
        - id: client
          type: '{T}'
          description: The client that has been disconnected.
        - id: exception
          type: System.Exception
          description: The exception that was thrown.
      overload: DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected(`0)
      commentId: M:DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected(`0)
      language: CSharp
      name:
        CSharp: OnClientDisconnected(T)
        VB: OnClientDisconnected(T)
      nameWithType:
        CSharp: ImpServer<T>.OnClientDisconnected(T)
        VB: ImpServer(Of T).OnClientDisconnected(T)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ImpServer<T>.OnClientDisconnected(T)
        VB: DouglasDwyer.Imp.ImpServer(Of T).OnClientDisconnected(T)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: OnClientDisconnected
        path: ../Imp/ImpServer.cs
        startLine: 274
      summary: "\nCalled whenever a client disconnects from the server.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnClientDisconnected(T client)
          VB: Protected Overridable Sub OnClientDisconnected(client As T)
        parameters:
        - id: client
          type: '{T}'
          description: The client that has been disconnected.
      overload: DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    references:
      DouglasDwyer.Imp.IImpClient: 
  - id: DouglasDwyer.Imp.INetworkSerializer
    commentId: T:DouglasDwyer.Imp.INetworkSerializer
    language: CSharp
    name:
      CSharp: INetworkSerializer
      VB: INetworkSerializer
    nameWithType:
      CSharp: INetworkSerializer
      VB: INetworkSerializer
    qualifiedName:
      CSharp: DouglasDwyer.Imp.INetworkSerializer
      VB: DouglasDwyer.Imp.INetworkSerializer
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/INetworkSerializer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: INetworkSerializer
      path: ../Imp/INetworkSerializer.cs
      startLine: 9
    summary: "\nRepresents a serializer that can be utilized send shared objects across the network, preserving their reference identities.\n"
    example: []
    syntax:
      content:
        CSharp: 'public interface INetworkSerializer : ICloneable'
        VB: >-
          Public Interface INetworkSerializer

              Inherits ICloneable
    inheritedMembers:
    - System.ICloneable.Clone
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.Imp.INetworkSerializer.Client
      commentId: P:DouglasDwyer.Imp.INetworkSerializer.Client
      language: CSharp
      name:
        CSharp: Client
        VB: Client
      nameWithType:
        CSharp: INetworkSerializer.Client
        VB: INetworkSerializer.Client
      qualifiedName:
        CSharp: DouglasDwyer.Imp.INetworkSerializer.Client
        VB: DouglasDwyer.Imp.INetworkSerializer.Client
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/INetworkSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Client
        path: ../Imp/INetworkSerializer.cs
        startLine: 14
      summary: "\nThe client to which this serializer belongs.\n"
      example: []
      syntax:
        content:
          CSharp: ImpClient Client { get; set; }
          VB: Property Client As ImpClient
        parameters: []
        return:
          type: DouglasDwyer.Imp.ImpClient
      overload: DouglasDwyer.Imp.INetworkSerializer.Client*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
      commentId: M:DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
      language: CSharp
      name:
        CSharp: Serialize(Object)
        VB: Serialize(Object)
      nameWithType:
        CSharp: INetworkSerializer.Serialize(Object)
        VB: INetworkSerializer.Serialize(Object)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
        VB: DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/INetworkSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Serialize
        path: ../Imp/INetworkSerializer.cs
        startLine: 21
      summary: "\nSerializes an object to a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: byte[] Serialize(object obj)
          VB: Function Serialize(obj As Object) As Byte()
        parameters:
        - id: obj
          type: System.Object
          description: The object to serialize.
        return:
          type: System.Byte[]
          description: A byte-based representation of the object.
      overload: DouglasDwyer.Imp.INetworkSerializer.Serialize*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
      commentId: M:DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
      language: CSharp
      name:
        CSharp: Deserialize(Byte[])
        VB: Deserialize(Byte())
      nameWithType:
        CSharp: INetworkSerializer.Deserialize(Byte[])
        VB: INetworkSerializer.Deserialize(Byte())
      qualifiedName:
        CSharp: DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
        VB: DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte())
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/INetworkSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Deserialize
        path: ../Imp/INetworkSerializer.cs
        startLine: 27
      summary: "\nDeserializes an object from a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: object Deserialize(byte[] data)
          VB: Function Deserialize(data As Byte()) As Object
        parameters:
        - id: data
          type: System.Byte[]
          description: The byte-based representation of the object.
        return:
          type: System.Object
          description: The deserialized object.
      overload: DouglasDwyer.Imp.INetworkSerializer.Deserialize*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize``1(System.Byte[])
      commentId: M:DouglasDwyer.Imp.INetworkSerializer.Deserialize``1(System.Byte[])
      language: CSharp
      name:
        CSharp: Deserialize<T>(Byte[])
        VB: Deserialize(Of T)(Byte())
      nameWithType:
        CSharp: INetworkSerializer.Deserialize<T>(Byte[])
        VB: INetworkSerializer.Deserialize(Of T)(Byte())
      qualifiedName:
        CSharp: DouglasDwyer.Imp.INetworkSerializer.Deserialize<T>(System.Byte[])
        VB: DouglasDwyer.Imp.INetworkSerializer.Deserialize(Of T)(System.Byte())
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/INetworkSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Deserialize
        path: ../Imp/INetworkSerializer.cs
        startLine: 34
      summary: "\nDeserializes an object from a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: T Deserialize<T>(byte[] data)
          VB: Function Deserialize(Of T)(data As Byte()) As T
        parameters:
        - id: data
          type: System.Byte[]
          description: The byte-based representation of the object.
        typeParameters:
        - id: T
          description: The type of the deserialized object.
        return:
          type: '{T}'
          description: The deserialized object.
      overload: DouglasDwyer.Imp.INetworkSerializer.Deserialize*
      modifiers:
        CSharp: []
        VB: []
  - id: DouglasDwyer.Imp.IProxyBinder
    commentId: T:DouglasDwyer.Imp.IProxyBinder
    language: CSharp
    name:
      CSharp: IProxyBinder
      VB: IProxyBinder
    nameWithType:
      CSharp: IProxyBinder
      VB: IProxyBinder
    qualifiedName:
      CSharp: DouglasDwyer.Imp.IProxyBinder
      VB: DouglasDwyer.Imp.IProxyBinder
    type: Interface
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/IProxyBinder.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: IProxyBinder
      path: ../Imp/IProxyBinder.cs
      startLine: 9
    summary: "\nClasses that implement <xref href=\"DouglasDwyer.Imp.IProxyBinder\" data-throw-if-not-resolved=\"false\"></xref> provide the ability to identify and convert between local shared types, their shared interfaces, and remote shared types.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IProxyBinder
        VB: Public Interface IProxyBinder
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
      language: CSharp
      name:
        CSharp: GetDataForProxy(Type)
        VB: GetDataForProxy(Type)
      nameWithType:
        CSharp: IProxyBinder.GetDataForProxy(Type)
        VB: IProxyBinder.GetDataForProxy(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetDataForProxy
        path: ../Imp/IProxyBinder.cs
        startLine: 22
      summary: "\nObtains the proxy data for the given shared interface type.\n"
      example: []
      syntax:
        content:
          CSharp: ProxyType GetDataForProxy(Type proxyInterface)
          VB: Function GetDataForProxy(proxyInterface As Type) As ProxyType
        parameters:
        - id: proxyInterface
          type: System.Type
          description: The interface type to identify.
        return:
          type: DouglasDwyer.Imp.ProxyType
          description: An object containing sharing data about the type.
      overload: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
      language: CSharp
      name:
        CSharp: GetDataForSharedType(Type)
        VB: GetDataForSharedType(Type)
      nameWithType:
        CSharp: IProxyBinder.GetDataForSharedType(Type)
        VB: IProxyBinder.GetDataForSharedType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetDataForSharedType
        path: ../Imp/IProxyBinder.cs
        startLine: 28
      summary: "\nObtains the proxy data for the given shared class.\n"
      example: []
      syntax:
        content:
          CSharp: ProxyType GetDataForSharedType(Type sharedType)
          VB: Function GetDataForSharedType(sharedType As Type) As ProxyType
        parameters:
        - id: sharedType
          type: System.Type
          description: The shared class to identify.
        return:
          type: DouglasDwyer.Imp.ProxyType
          description: An object containing sharing data about the type.
      overload: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      language: CSharp
      name:
        CSharp: GetProxyTypes()
        VB: GetProxyTypes()
      nameWithType:
        CSharp: IProxyBinder.GetProxyTypes()
        VB: IProxyBinder.GetProxyTypes()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes()
        VB: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyTypes
        path: ../Imp/IProxyBinder.cs
        startLine: 33
      summary: "\nReturns a list of all the shared proxy interfaces that this binder supports.\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerable<Type> GetProxyTypes()
          VB: Function GetProxyTypes As IEnumerable(Of Type)
        return:
          type: System.Collections.Generic.IEnumerable{System.Type}
          description: A list of shared interfaces.
      overload: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
      language: CSharp
      name:
        CSharp: GetRemoteType(Type)
        VB: GetRemoteType(Type)
      nameWithType:
        CSharp: IProxyBinder.GetRemoteType(Type)
        VB: IProxyBinder.GetRemoteType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetRemoteType
        path: ../Imp/IProxyBinder.cs
        startLine: 45
      summary: "\nReturns the remote type that represents the given shared interface.\n"
      example: []
      syntax:
        content:
          CSharp: Type GetRemoteType(Type proxyInterface)
          VB: Function GetRemoteType(proxyInterface As Type) As Type
        parameters:
        - id: proxyInterface
          type: System.Type
        return:
          type: System.Type
          description: The remote type.
      overload: DouglasDwyer.Imp.IProxyBinder.GetRemoteType*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
      language: CSharp
      name:
        CSharp: GetProxyForRemoteType(Type)
        VB: GetProxyForRemoteType(Type)
      nameWithType:
        CSharp: IProxyBinder.GetProxyForRemoteType(Type)
        VB: IProxyBinder.GetProxyForRemoteType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyForRemoteType
        path: ../Imp/IProxyBinder.cs
        startLine: 51
      summary: "\nReturns the shared interface represented by the given remote class.\n"
      example: []
      syntax:
        content:
          CSharp: Type GetProxyForRemoteType(Type remoteClass)
          VB: Function GetProxyForRemoteType(remoteClass As Type) As Type
        parameters:
        - id: remoteClass
          type: System.Type
        return:
          type: System.Type
          description: The shared interface.
      overload: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
      language: CSharp
      name:
        CSharp: GetProxyForLocalType(Type)
        VB: GetProxyForLocalType(Type)
      nameWithType:
        CSharp: IProxyBinder.GetProxyForLocalType(Type)
        VB: IProxyBinder.GetProxyForLocalType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetProxyForLocalType
        path: ../Imp/IProxyBinder.cs
        startLine: 57
      summary: "\nReturns the shared interface that represents the given local shared class.\n"
      example: []
      syntax:
        content:
          CSharp: Type GetProxyForLocalType(Type localType)
          VB: Function GetProxyForLocalType(localType As Type) As Type
        parameters:
        - id: localType
          type: System.Type
          description: The shared class which implements the interface.
        return:
          type: System.Type
          description: The shared interface.
      overload: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
      commentId: M:DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
      language: CSharp
      name:
        CSharp: IsSharedType(Type)
        VB: IsSharedType(Type)
      nameWithType:
        CSharp: IProxyBinder.IsSharedType(Type)
        VB: IProxyBinder.IsSharedType(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
        VB: DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/IProxyBinder.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: IsSharedType
        path: ../Imp/IProxyBinder.cs
        startLine: 63
      summary: "\nReturns whether a given type is shared.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsSharedType(Type sharedType)
          VB: Function IsSharedType(sharedType As Type) As Boolean
        parameters:
        - id: sharedType
          type: System.Type
          description: The type to check.
        return:
          type: System.Boolean
          description: Whether the given type is a local shared class, shared interface, or remote proxy class.
      overload: DouglasDwyer.Imp.IProxyBinder.IsSharedType*
      modifiers:
        CSharp: []
        VB: []
    references:
      DouglasDwyer.Imp.IProxyBinder: 
  - id: DouglasDwyer.Imp.LocalAttribute
    commentId: T:DouglasDwyer.Imp.LocalAttribute
    language: CSharp
    name:
      CSharp: LocalAttribute
      VB: LocalAttribute
    nameWithType:
      CSharp: LocalAttribute
      VB: LocalAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.LocalAttribute
      VB: DouglasDwyer.Imp.LocalAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/LocalAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: LocalAttribute
      path: ../Imp/LocalAttribute.cs
      startLine: 9
    summary: "\nIndicates that a given member is local and should not be included in the shared interface definition for its declaring type.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false, Inherited = true)]

          public sealed class LocalAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Method Or AttributeTargets.Property, AllowMultiple:=False, Inherited:=True)>

          Public NotInheritable Class LocalAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 192
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
      - name: Inherited
        type: System.Boolean
        value: true
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items: []
  - id: DouglasDwyer.Imp.ProxyForAttribute
    commentId: T:DouglasDwyer.Imp.ProxyForAttribute
    language: CSharp
    name:
      CSharp: ProxyForAttribute
      VB: ProxyForAttribute
    nameWithType:
      CSharp: ProxyForAttribute
      VB: ProxyForAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ProxyForAttribute
      VB: DouglasDwyer.Imp.ProxyForAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ProxyForAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ProxyForAttribute
      path: ../Imp/ProxyForAttribute.cs
      startLine: 11
    summary: "\nIndicates that a given type should be utilized as the base type for remote interface implementations. Base types must inherit from their shared interface. Base types should be <code>abstract</code>; any members left unimplemented will be automatically implemented during proxy generation.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]

          public sealed class ProxyForAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class, AllowMultiple:=False, Inherited:=False)>

          Public NotInheritable Class ProxyForAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 4
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
      - name: Inherited
        type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
      commentId: P:DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
      language: CSharp
      name:
        CSharp: InterfaceType
        VB: InterfaceType
      nameWithType:
        CSharp: ProxyForAttribute.InterfaceType
        VB: ProxyForAttribute.InterfaceType
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
        VB: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyForAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: InterfaceType
        path: ../Imp/ProxyForAttribute.cs
        startLine: 54
      summary: "\nThe interface for which this base class acts as a remote proxy.\n"
      example: []
      syntax:
        content:
          CSharp: public Type InterfaceType { get; }
          VB: Public ReadOnly Property InterfaceType As Type
        parameters: []
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
      commentId: M:DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
      language: CSharp
      name:
        CSharp: ProxyForAttribute(Type)
        VB: ProxyForAttribute(Type)
      nameWithType:
        CSharp: ProxyForAttribute.ProxyForAttribute(Type)
        VB: ProxyForAttribute.ProxyForAttribute(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute(System.Type)
        VB: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute(System.Type)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyForAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ProxyForAttribute.cs
        startLine: 60
      summary: "\nIndicates that the given type should be utilized as the base type for remote interface implementations. Base types must inherit from their shared interface. Base types should be <code>abstract</code>; any members left unimplemented will be automatically implemented during proxy generation.\n"
      example: []
      syntax:
        content:
          CSharp: public ProxyForAttribute(Type interfaceType)
          VB: Public Sub New(interfaceType As Type)
        parameters:
        - id: interfaceType
          type: System.Type
          description: The interface for which this class acts as a remote proxy.
      overload: DouglasDwyer.Imp.ProxyForAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.Imp.ProxyType
    commentId: T:DouglasDwyer.Imp.ProxyType
    language: CSharp
    name:
      CSharp: ProxyType
      VB: ProxyType
    nameWithType:
      CSharp: ProxyType
      VB: ProxyType
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ProxyType
      VB: DouglasDwyer.Imp.ProxyType
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ProxyType.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ProxyType
      path: ../Imp/ProxyType.cs
      startLine: 11
    summary: "\nStores information about a shared interface type.\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class ProxyType
        VB: Public NotInheritable Class ProxyType
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.Imp.ProxyType.InterfaceID
      commentId: P:DouglasDwyer.Imp.ProxyType.InterfaceID
      language: CSharp
      name:
        CSharp: InterfaceID
        VB: InterfaceID
      nameWithType:
        CSharp: ProxyType.InterfaceID
        VB: ProxyType.InterfaceID
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.InterfaceID
        VB: DouglasDwyer.Imp.ProxyType.InterfaceID
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: InterfaceID
        path: ../Imp/ProxyType.cs
        startLine: 16
      summary: "\nThe ID of this interface to be used in cross-network identification.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort InterfaceID { get; }
          VB: Public ReadOnly Property InterfaceID As UShort
        parameters: []
        return:
          type: System.UInt16
      overload: DouglasDwyer.Imp.ProxyType.InterfaceID*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyType.InterfaceType
      commentId: P:DouglasDwyer.Imp.ProxyType.InterfaceType
      language: CSharp
      name:
        CSharp: InterfaceType
        VB: InterfaceType
      nameWithType:
        CSharp: ProxyType.InterfaceType
        VB: ProxyType.InterfaceType
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.InterfaceType
        VB: DouglasDwyer.Imp.ProxyType.InterfaceType
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: InterfaceType
        path: ../Imp/ProxyType.cs
        startLine: 20
      summary: "\nThe interface that should be shared.\n"
      example: []
      syntax:
        content:
          CSharp: public Type InterfaceType { get; }
          VB: Public ReadOnly Property InterfaceType As Type
        parameters: []
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.ProxyType.InterfaceType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyType.RemoteBaseType
      commentId: P:DouglasDwyer.Imp.ProxyType.RemoteBaseType
      language: CSharp
      name:
        CSharp: RemoteBaseType
        VB: RemoteBaseType
      nameWithType:
        CSharp: ProxyType.RemoteBaseType
        VB: ProxyType.RemoteBaseType
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.RemoteBaseType
        VB: DouglasDwyer.Imp.ProxyType.RemoteBaseType
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: RemoteBaseType
        path: ../Imp/ProxyType.cs
        startLine: 24
      summary: "\nThe remote base type that should be inherited when generating a remote proxy class for this interface.\n"
      example: []
      syntax:
        content:
          CSharp: public Type RemoteBaseType { get; }
          VB: Public ReadOnly Property RemoteBaseType As Type
        parameters: []
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.ProxyType.RemoteBaseType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyType.Methods
      commentId: P:DouglasDwyer.Imp.ProxyType.Methods
      language: CSharp
      name:
        CSharp: Methods
        VB: Methods
      nameWithType:
        CSharp: ProxyType.Methods
        VB: ProxyType.Methods
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.Methods
        VB: DouglasDwyer.Imp.ProxyType.Methods
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Methods
        path: ../Imp/ProxyType.cs
        startLine: 28
      summary: "\nAll of the methods that can be called on this interface.\n"
      example: []
      syntax:
        content:
          CSharp: public IReadOnlyList<RemoteMethodInvoker> Methods { get; }
          VB: Public ReadOnly Property Methods As IReadOnlyList(Of RemoteMethodInvoker)
        parameters: []
        return:
          type: System.Collections.Generic.IReadOnlyList{DouglasDwyer.Imp.RemoteMethodInvoker}
      overload: DouglasDwyer.Imp.ProxyType.Methods*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyType.Properties
      commentId: P:DouglasDwyer.Imp.ProxyType.Properties
      language: CSharp
      name:
        CSharp: Properties
        VB: Properties
      nameWithType:
        CSharp: ProxyType.Properties
        VB: ProxyType.Properties
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.Properties
        VB: DouglasDwyer.Imp.ProxyType.Properties
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Properties
        path: ../Imp/ProxyType.cs
        startLine: 32
      summary: "\nAll of the properties that can be accessed on this interface.\n"
      example: []
      syntax:
        content:
          CSharp: public IReadOnlyList<PropertyInfo> Properties { get; }
          VB: Public ReadOnly Property Properties As IReadOnlyList(Of PropertyInfo)
        parameters: []
        return:
          type: System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
      overload: DouglasDwyer.Imp.ProxyType.Properties*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ProxyType.#ctor(System.UInt16,System.Type,System.Type)
      commentId: M:DouglasDwyer.Imp.ProxyType.#ctor(System.UInt16,System.Type,System.Type)
      language: CSharp
      name:
        CSharp: ProxyType(UInt16, Type, Type)
        VB: ProxyType(UInt16, Type, Type)
      nameWithType:
        CSharp: ProxyType.ProxyType(UInt16, Type, Type)
        VB: ProxyType.ProxyType(UInt16, Type, Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ProxyType.ProxyType(System.UInt16, System.Type, System.Type)
        VB: DouglasDwyer.Imp.ProxyType.ProxyType(System.UInt16, System.Type, System.Type)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ProxyType.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ProxyType.cs
        startLine: 42
      summary: "\nCreates a new <xref href=\"DouglasDwyer.Imp.ProxyType\" data-throw-if-not-resolved=\"false\"></xref> with the specified ID and type data.\n"
      example: []
      syntax:
        content:
          CSharp: public ProxyType(ushort id, Type mainType, Type remoteBaseType)
          VB: Public Sub New(id As UShort, mainType As Type, remoteBaseType As Type)
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of this shared interface.
        - id: mainType
          type: System.Type
          description: The interface to share.
        - id: remoteBaseType
          type: System.Type
          description: The remote base type that should be inherited when generating a remote proxy class.
      overload: DouglasDwyer.Imp.ProxyType.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.Imp.ProxyType: 
  - id: DouglasDwyer.Imp.RemoteException
    commentId: T:DouglasDwyer.Imp.RemoteException
    language: CSharp
    name:
      CSharp: RemoteException
      VB: RemoteException
    nameWithType:
      CSharp: RemoteException
      VB: RemoteException
    qualifiedName:
      CSharp: DouglasDwyer.Imp.RemoteException
      VB: DouglasDwyer.Imp.RemoteException
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/RemoteException.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: RemoteException
      path: ../Imp/RemoteException.cs
      startLine: 9
    summary: "\nRepresents an exception that has been thrown by a method/property call executing on a remote host.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RemoteException : Exception, ISerializable'
        VB: >-
          Public Class RemoteException

              Inherits Exception

              Implements ISerializable
    inheritance:
    - System.Object
    - System.Exception
    implements:
    - System.Runtime.Serialization.ISerializable
    inheritedMembers:
    - System.Exception.GetBaseException
    - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    - System.Exception.GetType
    - System.Exception.ToString
    - System.Exception.Data
    - System.Exception.HelpLink
    - System.Exception.HResult
    - System.Exception.InnerException
    - System.Exception.Source
    - System.Exception.TargetSite
    - System.Exception.SerializeObjectState
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.RemoteException.StackTrace
      commentId: P:DouglasDwyer.Imp.RemoteException.StackTrace
      language: CSharp
      name:
        CSharp: StackTrace
        VB: StackTrace
      nameWithType:
        CSharp: RemoteException.StackTrace
        VB: RemoteException.StackTrace
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteException.StackTrace
        VB: DouglasDwyer.Imp.RemoteException.StackTrace
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteException.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: StackTrace
        path: ../Imp/RemoteException.cs
        startLine: 11
      syntax:
        content:
          CSharp: public override string StackTrace { get; }
          VB: Public Overrides ReadOnly Property StackTrace As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.Imp.RemoteException.StackTrace*
      overridden: System.Exception.StackTrace
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteException.Message
      commentId: P:DouglasDwyer.Imp.RemoteException.Message
      language: CSharp
      name:
        CSharp: Message
        VB: Message
      nameWithType:
        CSharp: RemoteException.Message
        VB: RemoteException.Message
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteException.Message
        VB: DouglasDwyer.Imp.RemoteException.Message
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteException.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Message
        path: ../Imp/RemoteException.cs
        startLine: 12
      syntax:
        content:
          CSharp: public override string Message { get; }
          VB: Public Overrides ReadOnly Property Message As String
        parameters: []
        return:
          type: System.String
      overload: DouglasDwyer.Imp.RemoteException.Message*
      overridden: System.Exception.Message
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteException.#ctor(System.String,System.String)
      commentId: M:DouglasDwyer.Imp.RemoteException.#ctor(System.String,System.String)
      language: CSharp
      name:
        CSharp: RemoteException(String, String)
        VB: RemoteException(String, String)
      nameWithType:
        CSharp: RemoteException.RemoteException(String, String)
        VB: RemoteException.RemoteException(String, String)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteException.RemoteException(System.String, System.String)
        VB: DouglasDwyer.Imp.RemoteException.RemoteException(System.String, System.String)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteException.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteException.cs
        startLine: 21
      summary: "\nCreates a new remote exception with the given message and stack trace from the remote host.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteException(string remoteMessage, string remoteStackTrace)
          VB: Public Sub New(remoteMessage As String, remoteStackTrace As String)
        parameters:
        - id: remoteMessage
          type: System.String
          description: The original message, as thrown on the remote host.
        - id: remoteStackTrace
          type: System.String
          description: The original message, as thrown on the remote host.
      overload: DouglasDwyer.Imp.RemoteException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.RemoteException.#ctor(System.String,System.String,System.String)
      commentId: M:DouglasDwyer.Imp.RemoteException.#ctor(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: RemoteException(String, String, String)
        VB: RemoteException(String, String, String)
      nameWithType:
        CSharp: RemoteException.RemoteException(String, String, String)
        VB: RemoteException.RemoteException(String, String, String)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteException.RemoteException(System.String, System.String, System.String)
        VB: DouglasDwyer.Imp.RemoteException.RemoteException(System.String, System.String, System.String)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteException.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteException.cs
        startLine: 33
      summary: "\nCreates a new remote exception with the given message and stack trace from the remote host.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteException(string remoteMessage, string remoteStackTrace, string source)
          VB: Public Sub New(remoteMessage As String, remoteStackTrace As String, source As String)
        parameters:
        - id: remoteMessage
          type: System.String
          description: The original message, as thrown on the remote host.
        - id: remoteStackTrace
          type: System.String
          description: The original message, as thrown on the remote host.
        - id: source
          type: System.String
          description: The name of the application or object that caused this error, as thrown on the remote host.
      overload: DouglasDwyer.Imp.RemoteException.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.Imp.RemoteImpClient
    commentId: T:DouglasDwyer.Imp.RemoteImpClient
    language: CSharp
    name:
      CSharp: RemoteImpClient
      VB: RemoteImpClient
    nameWithType:
      CSharp: RemoteImpClient
      VB: RemoteImpClient
    qualifiedName:
      CSharp: DouglasDwyer.Imp.RemoteImpClient
      VB: DouglasDwyer.Imp.RemoteImpClient
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/RemoteImpClient.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: RemoteImpClient
      path: ../Imp/RemoteImpClient.cs
      startLine: 10
    summary: "\nActs as a proxy for an <xref href=\"DouglasDwyer.Imp.ImpClient\" data-throw-if-not-resolved=\"false\"></xref> on a remote host.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [ProxyFor(typeof(IImpClient))]

          public abstract class RemoteImpClient : RemoteSharedObject, IImpClient
        VB: >-
          <ProxyFor(GetType(IImpClient))>

          Public MustInherit Class RemoteImpClient

              Inherits RemoteSharedObject

              Implements IImpClient
    inheritance:
    - System.Object
    - DouglasDwyer.Imp.RemoteSharedObject
    implements:
    - DouglasDwyer.Imp.IImpClient
    inheritedMembers:
    - DouglasDwyer.Imp.RemoteSharedObject.ObjectID
    - DouglasDwyer.Imp.RemoteSharedObject.HostClient
    - DouglasDwyer.Imp.RemoteSharedObject.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: DouglasDwyer.Imp.ProxyForAttribute
      ctor: DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
      arguments:
      - type: System.Type
        value: DouglasDwyer.Imp.IImpClient
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: DouglasDwyer.Imp.RemoteImpClient.Server
      commentId: P:DouglasDwyer.Imp.RemoteImpClient.Server
      language: CSharp
      name:
        CSharp: Server
        VB: Server
      nameWithType:
        CSharp: RemoteImpClient.Server
        VB: RemoteImpClient.Server
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteImpClient.Server
        VB: DouglasDwyer.Imp.RemoteImpClient.Server
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Server
        path: ../Imp/RemoteImpClient.cs
        startLine: 13
      syntax:
        content:
          CSharp: public IImpServer Server { get; }
          VB: Public ReadOnly Property Server As IImpServer
        parameters: []
        return:
          type: DouglasDwyer.Imp.IImpServer
      overload: DouglasDwyer.Imp.RemoteImpClient.Server*
      implements:
      - DouglasDwyer.Imp.IImpClient.Server
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteImpClient.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      commentId: M:DouglasDwyer.Imp.RemoteImpClient.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      language: CSharp
      name:
        CSharp: RemoteImpClient(UInt16, ImpClient)
        VB: RemoteImpClient(UInt16, ImpClient)
      nameWithType:
        CSharp: RemoteImpClient.RemoteImpClient(UInt16, ImpClient)
        VB: RemoteImpClient.RemoteImpClient(UInt16, ImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteImpClient.RemoteImpClient(System.UInt16, DouglasDwyer.Imp.ImpClient)
        VB: DouglasDwyer.Imp.RemoteImpClient.RemoteImpClient(System.UInt16, DouglasDwyer.Imp.ImpClient)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteImpClient.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteImpClient.cs
        startLine: 20
      summary: "\nCreates a new remote shared object with the given ID and host.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteImpClient(ushort path, ImpClient host)
          VB: Public Sub New(path As UShort, host As ImpClient)
        parameters:
        - id: path
          type: System.UInt16
          description: The ID of the remote object.
        - id: host
          type: DouglasDwyer.Imp.ImpClient
          description: The client that owns this object.
      overload: DouglasDwyer.Imp.RemoteImpClient.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.Imp.ImpClient: 
  - id: DouglasDwyer.Imp.RemoteImpServer
    commentId: T:DouglasDwyer.Imp.RemoteImpServer
    language: CSharp
    name:
      CSharp: RemoteImpServer
      VB: RemoteImpServer
    nameWithType:
      CSharp: RemoteImpServer
      VB: RemoteImpServer
    qualifiedName:
      CSharp: DouglasDwyer.Imp.RemoteImpServer
      VB: DouglasDwyer.Imp.RemoteImpServer
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/RemoteImpServer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: RemoteImpServer
      path: ../Imp/RemoteImpServer.cs
      startLine: 9
    summary: "\nActs as a proxy for an <xref href=\"DouglasDwyer.Imp.ImpServer\" data-throw-if-not-resolved=\"false\"></xref> on a remote host.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [ProxyFor(typeof(IImpServer))]

          public abstract class RemoteImpServer : RemoteSharedObject, IImpServer
        VB: >-
          <ProxyFor(GetType(IImpServer))>

          Public MustInherit Class RemoteImpServer

              Inherits RemoteSharedObject

              Implements IImpServer
    inheritance:
    - System.Object
    - DouglasDwyer.Imp.RemoteSharedObject
    implements:
    - DouglasDwyer.Imp.IImpServer
    inheritedMembers:
    - DouglasDwyer.Imp.RemoteSharedObject.ObjectID
    - DouglasDwyer.Imp.RemoteSharedObject.HostClient
    - DouglasDwyer.Imp.RemoteSharedObject.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: DouglasDwyer.Imp.ProxyForAttribute
      ctor: DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
      arguments:
      - type: System.Type
        value: DouglasDwyer.Imp.IImpServer
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: DouglasDwyer.Imp.RemoteImpServer.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      commentId: M:DouglasDwyer.Imp.RemoteImpServer.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      language: CSharp
      name:
        CSharp: RemoteImpServer(UInt16, ImpClient)
        VB: RemoteImpServer(UInt16, ImpClient)
      nameWithType:
        CSharp: RemoteImpServer.RemoteImpServer(UInt16, ImpClient)
        VB: RemoteImpServer.RemoteImpServer(UInt16, ImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteImpServer.RemoteImpServer(System.UInt16, DouglasDwyer.Imp.ImpClient)
        VB: DouglasDwyer.Imp.RemoteImpServer.RemoteImpServer(System.UInt16, DouglasDwyer.Imp.ImpClient)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteImpServer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteImpServer.cs
        startLine: 17
      summary: "\nCreates a new remote shared object with the given ID and host.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteImpServer(ushort path, ImpClient host)
          VB: Public Sub New(path As UShort, host As ImpClient)
        parameters:
        - id: path
          type: System.UInt16
          description: The ID of the remote object.
        - id: host
          type: DouglasDwyer.Imp.ImpClient
          description: The client that owns this object.
      overload: DouglasDwyer.Imp.RemoteImpServer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.Imp.ImpServer: 
  - id: DouglasDwyer.Imp.RemoteMethodInvoker
    commentId: T:DouglasDwyer.Imp.RemoteMethodInvoker
    language: CSharp
    name:
      CSharp: RemoteMethodInvoker
      VB: RemoteMethodInvoker
    nameWithType:
      CSharp: RemoteMethodInvoker
      VB: RemoteMethodInvoker
    qualifiedName:
      CSharp: DouglasDwyer.Imp.RemoteMethodInvoker
      VB: DouglasDwyer.Imp.RemoteMethodInvoker
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/RemoteMethodInvoker.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: RemoteMethodInvoker
      path: ../Imp/RemoteMethodInvoker.cs
      startLine: 12
    summary: "\nAllows for customizable method invocation on behalf of a remote <xref href=\"DouglasDwyer.Imp.IImpClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content:
        CSharp: public class RemoteMethodInvoker
        VB: Public Class RemoteMethodInvoker
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.RemoteMethodInvoker.Method
      commentId: P:DouglasDwyer.Imp.RemoteMethodInvoker.Method
      language: CSharp
      name:
        CSharp: Method
        VB: Method
      nameWithType:
        CSharp: RemoteMethodInvoker.Method
        VB: RemoteMethodInvoker.Method
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteMethodInvoker.Method
        VB: DouglasDwyer.Imp.RemoteMethodInvoker.Method
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteMethodInvoker.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Method
        path: ../Imp/RemoteMethodInvoker.cs
        startLine: 17
      summary: "\nThe method that this invoker will invoke.\n"
      example: []
      syntax:
        content:
          CSharp: public MethodInfo Method { get; }
          VB: Public ReadOnly Property Method As MethodInfo
        parameters: []
        return:
          type: System.Reflection.MethodInfo
      overload: DouglasDwyer.Imp.RemoteMethodInvoker.Method*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
      commentId: P:DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
      language: CSharp
      name:
        CSharp: GetResult
        VB: GetResult
      nameWithType:
        CSharp: RemoteMethodInvoker.GetResult
        VB: RemoteMethodInvoker.GetResult
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
        VB: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteMethodInvoker.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: GetResult
        path: ../Imp/RemoteMethodInvoker.cs
        startLine: 18
      syntax:
        content:
          CSharp: protected Func<TaskScheduler, object, object[], Type[], Task<object>> GetResult { get; }
          VB: Protected ReadOnly Property GetResult As Func(Of TaskScheduler, Object, Object(), Type(), Task(Of Object))
        parameters: []
        return:
          type: System.Func{System.Threading.Tasks.TaskScheduler,System.Object,System.Object[],System.Type[],System.Threading.Tasks.Task{System.Object}}
      overload: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult*
      modifiers:
        CSharp:
        - protected
        - get
        VB:
        - Protected
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteMethodInvoker.#ctor(System.Reflection.MethodInfo)
      commentId: M:DouglasDwyer.Imp.RemoteMethodInvoker.#ctor(System.Reflection.MethodInfo)
      language: CSharp
      name:
        CSharp: RemoteMethodInvoker(MethodInfo)
        VB: RemoteMethodInvoker(MethodInfo)
      nameWithType:
        CSharp: RemoteMethodInvoker.RemoteMethodInvoker(MethodInfo)
        VB: RemoteMethodInvoker.RemoteMethodInvoker(MethodInfo)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteMethodInvoker.RemoteMethodInvoker(System.Reflection.MethodInfo)
        VB: DouglasDwyer.Imp.RemoteMethodInvoker.RemoteMethodInvoker(System.Reflection.MethodInfo)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteMethodInvoker.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteMethodInvoker.cs
        startLine: 24
      summary: "\nCreates a new invoker for the specified method. The invoker will examine the method&apos;s signature to determine whether the method should execute synchronously or asynchronously.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteMethodInvoker(MethodInfo method)
          VB: Public Sub New(method As MethodInfo)
        parameters:
        - id: method
          type: System.Reflection.MethodInfo
          description: The method that this invoker should call.
      overload: DouglasDwyer.Imp.RemoteMethodInvoker.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke(DouglasDwyer.Imp.IImpClient,DouglasDwyer.Imp.ImpClient,System.Object,System.Object[],System.Type[])
      commentId: M:DouglasDwyer.Imp.RemoteMethodInvoker.Invoke(DouglasDwyer.Imp.IImpClient,DouglasDwyer.Imp.ImpClient,System.Object,System.Object[],System.Type[])
      language: CSharp
      name:
        CSharp: Invoke(IImpClient, ImpClient, Object, Object[], Type[])
        VB: Invoke(IImpClient, ImpClient, Object, Object(), Type())
      nameWithType:
        CSharp: RemoteMethodInvoker.Invoke(IImpClient, ImpClient, Object, Object[], Type[])
        VB: RemoteMethodInvoker.Invoke(IImpClient, ImpClient, Object, Object(), Type())
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke(DouglasDwyer.Imp.IImpClient, DouglasDwyer.Imp.ImpClient, System.Object, System.Object[], System.Type[])
        VB: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke(DouglasDwyer.Imp.IImpClient, DouglasDwyer.Imp.ImpClient, System.Object, System.Object(), System.Type())
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteMethodInvoker.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Invoke
        path: ../Imp/RemoteMethodInvoker.cs
        startLine: 86
      summary: "\nAsynchronously invokes the given method using the <code data-dev-comment-type=\"paramref\" class=\"paramref\">caller</code>&apos;s task scheduler, returning a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the state of the operation.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Task<object> Invoke(IImpClient client, ImpClient caller, object target, object[] args, Type[] genericArguments)
          VB: Public Overridable Function Invoke(client As IImpClient, caller As ImpClient, target As Object, args As Object(), genericArguments As Type()) As Task(Of Object)
        parameters:
        - id: client
          type: DouglasDwyer.Imp.IImpClient
          description: The remote client that is calling this method.
        - id: caller
          type: DouglasDwyer.Imp.ImpClient
          description: The host client of the remote client.
        - id: target
          type: System.Object
          description: The object to invoke the method on.
        - id: args
          type: System.Object[]
          description: The arguments to provide to the method.
        - id: genericArguments
          type: System.Type[]
          description: The generic type arguments to utilize in the method&apos;s signature, or null if the method is not generic.
        return:
          type: System.Threading.Tasks.Task{System.Object}
          description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the current state of the method.
      overload: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        System.Threading.Tasks.Task: 
    references:
      DouglasDwyer.Imp.IImpClient: 
  - id: DouglasDwyer.Imp.RemoteSharedObject
    commentId: T:DouglasDwyer.Imp.RemoteSharedObject
    language: CSharp
    name:
      CSharp: RemoteSharedObject
      VB: RemoteSharedObject
    nameWithType:
      CSharp: RemoteSharedObject
      VB: RemoteSharedObject
    qualifiedName:
      CSharp: DouglasDwyer.Imp.RemoteSharedObject
      VB: DouglasDwyer.Imp.RemoteSharedObject
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/RemoteSharedObject.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: RemoteSharedObject
      path: ../Imp/RemoteSharedObject.cs
      startLine: 9
    summary: "\nThis is the base class for all interface implementations that represent an object on a remote host. Custom remote interface implementations should inherit from this class.\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class RemoteSharedObject
        VB: Public MustInherit Class RemoteSharedObject
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
      commentId: P:DouglasDwyer.Imp.RemoteSharedObject.ObjectID
      language: CSharp
      name:
        CSharp: ObjectID
        VB: ObjectID
      nameWithType:
        CSharp: RemoteSharedObject.ObjectID
        VB: RemoteSharedObject.ObjectID
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
        VB: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteSharedObject.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ObjectID
        path: ../Imp/RemoteSharedObject.cs
        startLine: 14
      summary: "\nThe ID of this object used to identify on the remote host.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort ObjectID { get; }
          VB: Public ReadOnly Property ObjectID As UShort
        parameters: []
        return:
          type: System.UInt16
      overload: DouglasDwyer.Imp.RemoteSharedObject.ObjectID*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteSharedObject.HostClient
      commentId: P:DouglasDwyer.Imp.RemoteSharedObject.HostClient
      language: CSharp
      name:
        CSharp: HostClient
        VB: HostClient
      nameWithType:
        CSharp: RemoteSharedObject.HostClient
        VB: RemoteSharedObject.HostClient
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteSharedObject.HostClient
        VB: DouglasDwyer.Imp.RemoteSharedObject.HostClient
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteSharedObject.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: HostClient
        path: ../Imp/RemoteSharedObject.cs
        startLine: 18
      summary: "\nThe client that owns this object.\n"
      example: []
      syntax:
        content:
          CSharp: public ImpClient HostClient { get; }
          VB: Public ReadOnly Property HostClient As ImpClient
        parameters: []
        return:
          type: DouglasDwyer.Imp.ImpClient
      overload: DouglasDwyer.Imp.RemoteSharedObject.HostClient*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.RemoteSharedObject.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      commentId: M:DouglasDwyer.Imp.RemoteSharedObject.#ctor(System.UInt16,DouglasDwyer.Imp.ImpClient)
      language: CSharp
      name:
        CSharp: RemoteSharedObject(UInt16, ImpClient)
        VB: RemoteSharedObject(UInt16, ImpClient)
      nameWithType:
        CSharp: RemoteSharedObject.RemoteSharedObject(UInt16, ImpClient)
        VB: RemoteSharedObject.RemoteSharedObject(UInt16, ImpClient)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteSharedObject.RemoteSharedObject(System.UInt16, DouglasDwyer.Imp.ImpClient)
        VB: DouglasDwyer.Imp.RemoteSharedObject.RemoteSharedObject(System.UInt16, DouglasDwyer.Imp.ImpClient)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteSharedObject.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/RemoteSharedObject.cs
        startLine: 25
      summary: "\nCreates a new remote shared object with the given ID and host.\n"
      example: []
      syntax:
        content:
          CSharp: public RemoteSharedObject(ushort path, ImpClient host)
          VB: Public Sub New(path As UShort, host As ImpClient)
        parameters:
        - id: path
          type: System.UInt16
          description: The ID of the remote object.
        - id: host
          type: DouglasDwyer.Imp.ImpClient
          description: The client that owns this object.
      overload: DouglasDwyer.Imp.RemoteSharedObject.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.RemoteSharedObject.ToString
      commentId: M:DouglasDwyer.Imp.RemoteSharedObject.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: RemoteSharedObject.ToString()
        VB: RemoteSharedObject.ToString()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteSharedObject.ToString()
        VB: DouglasDwyer.Imp.RemoteSharedObject.ToString()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteSharedObject.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: ToString
        path: ../Imp/RemoteSharedObject.cs
        startLine: 31
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: DouglasDwyer.Imp.RemoteSharedObject.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: DouglasDwyer.Imp.RemoteSharedObject.Finalize
      commentId: M:DouglasDwyer.Imp.RemoteSharedObject.Finalize
      language: CSharp
      name:
        CSharp: Finalize()
        VB: Finalize()
      nameWithType:
        CSharp: RemoteSharedObject.Finalize()
        VB: RemoteSharedObject.Finalize()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.RemoteSharedObject.Finalize()
        VB: DouglasDwyer.Imp.RemoteSharedObject.Finalize()
      type: Method
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/RemoteSharedObject.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: Finalize
        path: ../Imp/RemoteSharedObject.cs
        startLine: 41
      syntax:
        content:
          CSharp: protected void Finalize()
          VB: Protected Sub Finalize
      overload: DouglasDwyer.Imp.RemoteSharedObject.Finalize*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: DouglasDwyer.Imp.ShareAsAttribute
    commentId: T:DouglasDwyer.Imp.ShareAsAttribute
    language: CSharp
    name:
      CSharp: ShareAsAttribute
      VB: ShareAsAttribute
    nameWithType:
      CSharp: ShareAsAttribute
      VB: ShareAsAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.ShareAsAttribute
      VB: DouglasDwyer.Imp.ShareAsAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/ShareAsAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: ShareAsAttribute
      path: ../Imp/ShareAsAttribute.cs
      startLine: 10
    summary: "\nIndicates that a type should be shared across the network using a given interface.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, AllowMultiple = true, Inherited = false)]

          public class ShareAsAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Assembly Or AttributeTargets.Class, AllowMultiple:=True, Inherited:=False)>

          Public Class ShareAsAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 5
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: true
      - name: Inherited
        type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
      commentId: P:DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
      language: CSharp
      name:
        CSharp: TypeToShare
        VB: TypeToShare
      nameWithType:
        CSharp: ShareAsAttribute.TypeToShare
        VB: ShareAsAttribute.TypeToShare
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
        VB: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ShareAsAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: TypeToShare
        path: ../Imp/ShareAsAttribute.cs
        startLine: 16
      summary: "\nThe type that should be shared.\n"
      example: []
      syntax:
        content:
          CSharp: public Type TypeToShare { get; }
          VB: Public ReadOnly Property TypeToShare As Type
        parameters: []
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
      commentId: P:DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
      language: CSharp
      name:
        CSharp: InterfaceBinding
        VB: InterfaceBinding
      nameWithType:
        CSharp: ShareAsAttribute.InterfaceBinding
        VB: ShareAsAttribute.InterfaceBinding
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
        VB: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
      type: Property
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ShareAsAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: InterfaceBinding
        path: ../Imp/ShareAsAttribute.cs
        startLine: 20
      summary: "\nThe interface under which the type should be shared.\n"
      example: []
      syntax:
        content:
          CSharp: public Type InterfaceBinding { get; }
          VB: Public ReadOnly Property InterfaceBinding As Type
        parameters: []
        return:
          type: System.Type
      overload: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.Imp.ShareAsAttribute.#ctor(System.Type)
      commentId: M:DouglasDwyer.Imp.ShareAsAttribute.#ctor(System.Type)
      language: CSharp
      name:
        CSharp: ShareAsAttribute(Type)
        VB: ShareAsAttribute(Type)
      nameWithType:
        CSharp: ShareAsAttribute.ShareAsAttribute(Type)
        VB: ShareAsAttribute.ShareAsAttribute(Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute(System.Type)
        VB: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute(System.Type)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ShareAsAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ShareAsAttribute.cs
        startLine: 26
      summary: "\nIndicates that this type should be shared across the network using a given interface. \n"
      example: []
      syntax:
        content:
          CSharp: public ShareAsAttribute(Type interfaceBinding)
          VB: Public Sub New(interfaceBinding As Type)
        parameters:
        - id: interfaceBinding
          type: System.Type
          description: The interface under which this type should be shared.
      overload: DouglasDwyer.Imp.ShareAsAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.Imp.ShareAsAttribute.#ctor(System.Type,System.Type)
      commentId: M:DouglasDwyer.Imp.ShareAsAttribute.#ctor(System.Type,System.Type)
      language: CSharp
      name:
        CSharp: ShareAsAttribute(Type, Type)
        VB: ShareAsAttribute(Type, Type)
      nameWithType:
        CSharp: ShareAsAttribute.ShareAsAttribute(Type, Type)
        VB: ShareAsAttribute.ShareAsAttribute(Type, Type)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute(System.Type, System.Type)
        VB: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute(System.Type, System.Type)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/ShareAsAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/ShareAsAttribute.cs
        startLine: 36
      summary: "\nIndicates that a type should be shared across the network using a given interface.\n"
      example: []
      syntax:
        content:
          CSharp: public ShareAsAttribute(Type typeToShare, Type interfaceBinding)
          VB: Public Sub New(typeToShare As Type, interfaceBinding As Type)
        parameters:
        - id: typeToShare
          type: System.Type
          description: The type that should be shared.
        - id: interfaceBinding
          type: System.Type
          description: The interface under which the type should be shared.
      overload: DouglasDwyer.Imp.ShareAsAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: DouglasDwyer.Imp.SharedAttribute
    commentId: T:DouglasDwyer.Imp.SharedAttribute
    language: CSharp
    name:
      CSharp: SharedAttribute
      VB: SharedAttribute
    nameWithType:
      CSharp: SharedAttribute
      VB: SharedAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.SharedAttribute
      VB: DouglasDwyer.Imp.SharedAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/SharedAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: SharedAttribute
      path: ../Imp/SharedAttribute.cs
      startLine: 7
    summary: "\nIndicates that this type should be shared across the network and that an interface for sharing should be automatically generated. If an interface for sharing already exists, use <xref href=\"DouglasDwyer.Imp.ShareAsAttribute\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]

          public sealed class SharedAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class, AllowMultiple:=False, Inherited:=False)>

          Public NotInheritable Class SharedAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 4
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
      - name: Inherited
        type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: DouglasDwyer.Imp.SharedAttribute.#ctor
      commentId: M:DouglasDwyer.Imp.SharedAttribute.#ctor
      language: CSharp
      name:
        CSharp: SharedAttribute()
        VB: SharedAttribute()
      nameWithType:
        CSharp: SharedAttribute.SharedAttribute()
        VB: SharedAttribute.SharedAttribute()
      qualifiedName:
        CSharp: DouglasDwyer.Imp.SharedAttribute.SharedAttribute()
        VB: DouglasDwyer.Imp.SharedAttribute.SharedAttribute()
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/SharedAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/SharedAttribute.cs
        startLine: 13
      summary: "\nIndicates that this type should be shared across the network and that an interface for sharing should be automatically generated. If an interface for sharing already exists, use <xref href=\"DouglasDwyer.Imp.ShareAsAttribute\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
      example: []
      syntax:
        content:
          CSharp: public SharedAttribute()
          VB: Public Sub New
      overload: DouglasDwyer.Imp.SharedAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.Imp.ShareAsAttribute: 
    - id: DouglasDwyer.Imp.SharedAttribute.#ctor(System.String)
      commentId: M:DouglasDwyer.Imp.SharedAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: SharedAttribute(String)
        VB: SharedAttribute(String)
      nameWithType:
        CSharp: SharedAttribute.SharedAttribute(String)
        VB: SharedAttribute.SharedAttribute(String)
      qualifiedName:
        CSharp: DouglasDwyer.Imp.SharedAttribute.SharedAttribute(System.String)
        VB: DouglasDwyer.Imp.SharedAttribute.SharedAttribute(System.String)
      type: Constructor
      assemblies:
      - Imp
      namespace: DouglasDwyer.Imp
      source:
        remote:
          path: Imp/SharedAttribute.cs
          branch: main
          repo: https://github.com/DouglasDwyer/Imp.NET.git
        id: .ctor
        path: ../Imp/SharedAttribute.cs
        startLine: 18
      summary: "\nIndicates that this type should be shared across the network and that an interface for sharing should be automatically generated. If an interface for sharing already exists, use <xref href=\"DouglasDwyer.Imp.ShareAsAttribute\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
      example: []
      syntax:
        content:
          CSharp: public SharedAttribute(string interfaceName)
          VB: Public Sub New(interfaceName As String)
        parameters:
        - id: interfaceName
          type: System.String
          description: The namespace-qualified name of the interface to generate.
      overload: DouglasDwyer.Imp.SharedAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.Imp.ShareAsAttribute: 
    references:
      DouglasDwyer.Imp.ShareAsAttribute: 
  - id: DouglasDwyer.Imp.UnreliableAttribute
    commentId: T:DouglasDwyer.Imp.UnreliableAttribute
    language: CSharp
    name:
      CSharp: UnreliableAttribute
      VB: UnreliableAttribute
    nameWithType:
      CSharp: UnreliableAttribute
      VB: UnreliableAttribute
    qualifiedName:
      CSharp: DouglasDwyer.Imp.UnreliableAttribute
      VB: DouglasDwyer.Imp.UnreliableAttribute
    type: Class
    assemblies:
    - Imp
    namespace: DouglasDwyer.Imp
    source:
      remote:
        path: Imp/UnreliableAttribute.cs
        branch: main
        repo: https://github.com/DouglasDwyer/Imp.NET.git
      id: UnreliableAttribute
      path: ../Imp/UnreliableAttribute.cs
      startLine: 9
    summary: "\nIndicates that remote calls to this method should be conducted over UDP. Unreliable methods may be faster than normal remote method invocations, but unreliable methods are not guaranteed to be called on the remote host. Unreliable methods occur without reference-tracking or awaiting return values, so unreliable methods must return void and cannot take shared types as arguments.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]

          public sealed class UnreliableAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Method, AllowMultiple:=False, Inherited:=True)>

          Public NotInheritable Class UnreliableAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 64
      namedArguments:
      - name: AllowMultiple
        type: System.Boolean
        value: false
      - name: Inherited
        type: System.Boolean
        value: true
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items: []
references:
  DouglasDwyer.Imp.IImpClient:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      VB:
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IImpClient
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Attribute:
    name:
      CSharp:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
      VB:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Attribute
  System.Attribute.Equals(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Equals(System.Object)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetHashCode:
    name:
      CSharp:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetHashCode
  System.Attribute.IsDefaultAttribute:
    name:
      CSharp:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefaultAttribute
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.Match(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Match(System.Object)
  System.Attribute.TypeId:
    name:
      CSharp:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
      VB:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
    isDefinition: true
    parent: System.Attribute
    commentId: P:System.Attribute.TypeId
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  DouglasDwyer.Imp.CallingClientAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.CallingClientAttribute
        name: CallingClientAttribute
        nameWithType: CallingClientAttribute
        qualifiedName: DouglasDwyer.Imp.CallingClientAttribute
      VB:
      - id: DouglasDwyer.Imp.CallingClientAttribute
        name: CallingClientAttribute
        nameWithType: CallingClientAttribute
        qualifiedName: DouglasDwyer.Imp.CallingClientAttribute
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.CallingClientAttribute
  System.AttributeUsageAttribute:
    name:
      CSharp:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
      VB:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeUsageAttribute
  System.AttributeUsageAttribute.#ctor(System.AttributeTargets):
    name:
      CSharp:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.AttributeUsageAttribute
    commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  System.AttributeTargets:
    name:
      CSharp:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      VB:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeTargets
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  DouglasDwyer.Imp:
    name:
      CSharp:
      - name: DouglasDwyer.Imp
        nameWithType: DouglasDwyer.Imp
        qualifiedName: DouglasDwyer.Imp
      VB:
      - name: DouglasDwyer.Imp
        nameWithType: DouglasDwyer.Imp
        qualifiedName: DouglasDwyer.Imp
    isDefinition: true
    commentId: N:DouglasDwyer.Imp
  DouglasDwyer.Imp.IProxyBinder:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder
        name: IProxyBinder
        nameWithType: IProxyBinder
        qualifiedName: DouglasDwyer.Imp.IProxyBinder
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder
        name: IProxyBinder
        nameWithType: IProxyBinder
        qualifiedName: DouglasDwyer.Imp.IProxyBinder
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IProxyBinder
  DouglasDwyer.Imp.IdentifiedCollection`1:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1
        name: IdentifiedCollection
        nameWithType: IdentifiedCollection
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1
        name: IdentifiedCollection
        nameWithType: IdentifiedCollection
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.IdentifiedCollection`1
  DouglasDwyer.Imp.IdentifiedCollection{System.Type}:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1
        name: IdentifiedCollection
        nameWithType: IdentifiedCollection
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1
        name: IdentifiedCollection
        nameWithType: IdentifiedCollection
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DouglasDwyer.Imp.IdentifiedCollection`1
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IdentifiedCollection{System.Type}
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{DouglasDwyer.Imp.ProxyType}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.Imp.ProxyType
        name: ProxyType
        nameWithType: ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.Imp.ProxyType
        name: ProxyType
        nameWithType: ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{DouglasDwyer.Imp.ProxyType}
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.Type,System.Type}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.Type,System.Type}
  DouglasDwyer.Imp.ProxyType:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType
        name: ProxyType
        nameWithType: ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType
      VB:
      - id: DouglasDwyer.Imp.ProxyType
        name: ProxyType
        nameWithType: ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.ProxyType
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy*
        name: GetDataForProxy
        nameWithType: GeneratorProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy*
        name: GetDataForProxy
        nameWithType: GeneratorProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForProxy
  DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
        name: GetDataForProxy
        nameWithType: IProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
        name: GetDataForProxy
        nameWithType: IProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetDataForProxy(System.Type)
  DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType*
        name: GetDataForSharedType
        nameWithType: GeneratorProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType*
        name: GetDataForSharedType
        nameWithType: GeneratorProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetDataForSharedType
  DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
        name: GetDataForSharedType
        nameWithType: IProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
        name: GetDataForSharedType
        nameWithType: IProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType(System.Type)
  DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType*
        name: GetProxyForLocalType
        nameWithType: GeneratorProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType*
        name: GetProxyForLocalType
        nameWithType: GeneratorProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForLocalType
  DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
        name: GetProxyForLocalType
        nameWithType: IProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
        name: GetProxyForLocalType
        nameWithType: IProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType(System.Type)
  DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType*
        name: GetProxyForRemoteType
        nameWithType: GeneratorProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType*
        name: GetProxyForRemoteType
        nameWithType: GeneratorProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyForRemoteType
  DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
        name: GetProxyForRemoteType
        nameWithType: IProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
        name: GetProxyForRemoteType
        nameWithType: IProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType(System.Type)
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType*
        name: GetRemoteType
        nameWithType: GeneratorProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType*
        name: GetRemoteType
        nameWithType: GeneratorProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetRemoteType
  DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
        name: GetRemoteType
        nameWithType: IProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetRemoteType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
        name: GetRemoteType
        nameWithType: IProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetRemoteType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetRemoteType(System.Type)
  DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType*
        name: IsSharedType
        nameWithType: GeneratorProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType*
        name: IsSharedType
        nameWithType: GeneratorProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.IsSharedType
  DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
        name: IsSharedType
        nameWithType: IProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.IsSharedType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
        name: IsSharedType
        nameWithType: IProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.IsSharedType
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.IsSharedType(System.Type)
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{System.Type}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes*
        name: GetProxyTypes
        nameWithType: GeneratorProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes*
        name: GetProxyTypes
        nameWithType: GeneratorProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GetProxyTypes
  DouglasDwyer.Imp.IProxyBinder.GetProxyTypes:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
        name: GetProxyTypes
        nameWithType: IProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
        name: GetProxyTypes
        nameWithType: IProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.IProxyBinder
    commentId: M:DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
  DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface:
    commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.RemoteClassToInterface
  DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass:
    commentId: F:DouglasDwyer.Imp.GeneratorProxyBinder.RemoteInterfaceToClass
  DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies*
        name: GenerateProxies
        nameWithType: GeneratorProxyBinder.GenerateProxies
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies*
        name: GenerateProxies
        nameWithType: GeneratorProxyBinder.GenerateProxies
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.GeneratorProxyBinder.GenerateProxies
  DouglasDwyer.Imp.GeneratorProxyBinder:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder
        name: GeneratorProxyBinder
        nameWithType: GeneratorProxyBinder
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder
      VB:
      - id: DouglasDwyer.Imp.GeneratorProxyBinder
        name: GeneratorProxyBinder
        nameWithType: GeneratorProxyBinder
        qualifiedName: DouglasDwyer.Imp.GeneratorProxyBinder
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.GeneratorProxyBinder
  System.Collections.Generic.IEnumerable{System.UInt16}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.UInt16}
  DouglasDwyer.Imp.IdentifiedCollection`1.Keys*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Keys*
        name: Keys
        nameWithType: IdentifiedCollection<T>.Keys
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Keys
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Keys*
        name: Keys
        nameWithType: IdentifiedCollection(Of T).Keys
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Keys
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Keys
  System.Collections.Generic.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{`0}
  DouglasDwyer.Imp.IdentifiedCollection`1.Values*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Values*
        name: Values
        nameWithType: IdentifiedCollection<T>.Values
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Values
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Values*
        name: Values
        nameWithType: IdentifiedCollection(Of T).Values
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Values
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Values
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  DouglasDwyer.Imp.IdentifiedCollection`1.Count*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Count*
        name: Count
        nameWithType: IdentifiedCollection<T>.Count
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Count
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Count*
        name: Count
        nameWithType: IdentifiedCollection(Of T).Count
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Count
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Count
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  DouglasDwyer.Imp.IdentifiedCollection`1.Item*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Item*
        name: Item
        nameWithType: IdentifiedCollection<T>.Item
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Item
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Item*
        name: Item
        nameWithType: IdentifiedCollection(Of T).Item
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Item
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Item
  DouglasDwyer.Imp.IdentifiedCollection`1.Add*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Add*
        name: Add
        nameWithType: IdentifiedCollection<T>.Add
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Add
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Add*
        name: Add
        nameWithType: IdentifiedCollection(Of T).Add
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Add
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Add
  System.Func`2:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Func`2
  System.Func{System.UInt16,{T}}:
    name:
      CSharp:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`2
    parent: System
    commentId: T:System.Func{System.UInt16,`0}
  DouglasDwyer.Imp.IdentifiedCollection`1.Remove*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Remove*
        name: Remove
        nameWithType: IdentifiedCollection<T>.Remove
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.Remove
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.Remove*
        name: Remove
        nameWithType: IdentifiedCollection(Of T).Remove
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).Remove
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.Remove
  DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue*
        name: TryGetValue
        nameWithType: IdentifiedCollection<T>.TryGetValue
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.TryGetValue
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue*
        name: TryGetValue
        nameWithType: IdentifiedCollection(Of T).TryGetValue
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).TryGetValue
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.TryGetValue
  DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID*
        name: TryGetID
        nameWithType: IdentifiedCollection<T>.TryGetID
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.TryGetID
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID*
        name: TryGetID
        nameWithType: IdentifiedCollection(Of T).TryGetID
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).TryGetID
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.TryGetID
  DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID*
        name: ContainsID
        nameWithType: IdentifiedCollection<T>.ContainsID
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.ContainsID
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID*
        name: ContainsID
        nameWithType: IdentifiedCollection(Of T).ContainsID
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).ContainsID
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.ContainsID
  DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue*
        name: ContainsValue
        nameWithType: IdentifiedCollection<T>.ContainsValue
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection<T>.ContainsValue
      VB:
      - id: DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue*
        name: ContainsValue
        nameWithType: IdentifiedCollection(Of T).ContainsValue
        qualifiedName: DouglasDwyer.Imp.IdentifiedCollection(Of T).ContainsValue
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IdentifiedCollection`1.ContainsValue
  DouglasDwyer.Imp.ImpClient:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient
        name: ImpClient
        nameWithType: ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient
      VB:
      - id: DouglasDwyer.Imp.ImpClient
        name: ImpClient
        nameWithType: ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.ImpClient
  DouglasDwyer.Imp.IImpServer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpServer
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
      VB:
      - id: DouglasDwyer.Imp.IImpServer
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IImpServer
  DouglasDwyer.Imp.IImpClient.Server*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpClient.Server*
        name: Server
        nameWithType: IImpClient.Server
        qualifiedName: DouglasDwyer.Imp.IImpClient.Server
      VB:
      - id: DouglasDwyer.Imp.IImpClient.Server*
        name: Server
        nameWithType: IImpClient.Server
        qualifiedName: DouglasDwyer.Imp.IImpClient.Server
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IImpClient.Server
  DouglasDwyer.Imp.IImpClient.Server:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpClient.Server
        name: Server
        nameWithType: IImpClient.Server
        qualifiedName: DouglasDwyer.Imp.IImpClient.Server
      VB:
      - id: DouglasDwyer.Imp.IImpClient.Server
        name: Server
        nameWithType: IImpClient.Server
        qualifiedName: DouglasDwyer.Imp.IImpClient.Server
    isDefinition: true
    parent: DouglasDwyer.Imp.IImpClient
    commentId: P:DouglasDwyer.Imp.IImpClient.Server
  DouglasDwyer.Imp.IImpClient`1:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpClient`1
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IImpClient`1
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.IImpClient`1
  DouglasDwyer.Imp.ImpServer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer
        name: ImpServer
        nameWithType: ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer
      VB:
      - id: DouglasDwyer.Imp.ImpServer
        name: ImpServer
        nameWithType: ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.ImpServer
  DouglasDwyer.Imp.ImpServer`1:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1
        name: ImpServer
        nameWithType: ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1
        name: ImpServer
        nameWithType: ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.ImpServer`1
  DouglasDwyer.Imp.IImpServer`1:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpServer`1
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IImpServer`1
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.IImpServer`1
  DouglasDwyer.Imp.ImpClient.Server*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Server*
        name: Server
        nameWithType: ImpClient.Server
        qualifiedName: DouglasDwyer.Imp.ImpClient.Server
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Server*
        name: Server
        nameWithType: ImpClient.Server
        qualifiedName: DouglasDwyer.Imp.ImpClient.Server
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Server
  DouglasDwyer.Imp.INetworkSerializer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer
        name: INetworkSerializer
        nameWithType: INetworkSerializer
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer
        name: INetworkSerializer
        nameWithType: INetworkSerializer
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.INetworkSerializer
  DouglasDwyer.Imp.ImpClient.Serializer*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Serializer*
        name: Serializer
        nameWithType: ImpClient.Serializer
        qualifiedName: DouglasDwyer.Imp.ImpClient.Serializer
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Serializer*
        name: Serializer
        nameWithType: ImpClient.Serializer
        qualifiedName: DouglasDwyer.Imp.ImpClient.Serializer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Serializer
  DouglasDwyer.Imp.ImpClient.SharedTypeBinder*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.SharedTypeBinder*
        name: SharedTypeBinder
        nameWithType: ImpClient.SharedTypeBinder
        qualifiedName: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
      VB:
      - id: DouglasDwyer.Imp.ImpClient.SharedTypeBinder*
        name: SharedTypeBinder
        nameWithType: ImpClient.SharedTypeBinder
        qualifiedName: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.SharedTypeBinder
  DouglasDwyer.Imp.ImpClient.Local*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Local*
        name: Local
        nameWithType: ImpClient.Local
        qualifiedName: DouglasDwyer.Imp.ImpClient.Local
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Local*
        name: Local
        nameWithType: ImpClient.Local
        qualifiedName: DouglasDwyer.Imp.ImpClient.Local
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Local
  DouglasDwyer.Imp.ImpClient.Connected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Connected*
        name: Connected
        nameWithType: ImpClient.Connected
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connected
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Connected*
        name: Connected
        nameWithType: ImpClient.Connected
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Connected
  DouglasDwyer.Imp.ImpClient.NetworkID*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.NetworkID*
        name: NetworkID
        nameWithType: ImpClient.NetworkID
        qualifiedName: DouglasDwyer.Imp.ImpClient.NetworkID
      VB:
      - id: DouglasDwyer.Imp.ImpClient.NetworkID*
        name: NetworkID
        nameWithType: ImpClient.NetworkID
        qualifiedName: DouglasDwyer.Imp.ImpClient.NetworkID
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.NetworkID
  System.Threading.SynchronizationContext:
    commentId: T:System.Threading.SynchronizationContext
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
        isExternal: true
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.TaskScheduler:
    name:
      CSharp:
      - id: System.Threading.Tasks.TaskScheduler
        name: TaskScheduler
        nameWithType: TaskScheduler
        qualifiedName: System.Threading.Tasks.TaskScheduler
        isExternal: true
      VB:
      - id: System.Threading.Tasks.TaskScheduler
        name: TaskScheduler
        nameWithType: TaskScheduler
        qualifiedName: System.Threading.Tasks.TaskScheduler
        isExternal: true
    isDefinition: true
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.TaskScheduler
  DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler*
        name: RemoteTaskScheduler
        nameWithType: ImpClient.RemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
      VB:
      - id: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler*
        name: RemoteTaskScheduler
        nameWithType: ImpClient.RemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
  DouglasDwyer.Imp.ImpClient.MaximumHeldObjects*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects*
        name: MaximumHeldObjects
        nameWithType: ImpClient.MaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
      VB:
      - id: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects*
        name: MaximumHeldObjects
        nameWithType: ImpClient.MaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
  DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects*
        name: MaximumRemoteObjects
        nameWithType: ImpClient.MaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
      VB:
      - id: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects*
        name: MaximumRemoteObjects
        nameWithType: ImpClient.MaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
  DouglasDwyer.Imp.ImpClient.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.#ctor*
        name: ImpClient
        nameWithType: ImpClient.ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient.ImpClient
      VB:
      - id: DouglasDwyer.Imp.ImpClient.#ctor*
        name: ImpClient
        nameWithType: ImpClient.ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient.ImpClient
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.#ctor
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  DouglasDwyer.Imp.ImpClient.Connect*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Connect*
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Connect*
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Connect
  System.Net:
    name:
      CSharp:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
        isExternal: true
      VB:
      - name: System.Net
        nameWithType: System.Net
        qualifiedName: System.Net
    isDefinition: true
    commentId: N:System.Net
  System.Net.IPAddress:
    name:
      CSharp:
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
      VB:
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
    isDefinition: true
    parent: System.Net
    commentId: T:System.Net.IPAddress
  System.Threading.Tasks.Task:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      VB:
      - id: System.Threading.Tasks.Task
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
    isDefinition: true
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task
  DouglasDwyer.Imp.ImpClient.ConnectAsync*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync*
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
      VB:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync*
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.ConnectAsync
  DouglasDwyer.Imp.ImpClient.Disconnect*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Disconnect*
        name: Disconnect
        nameWithType: ImpClient.Disconnect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Disconnect
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Disconnect*
        name: Disconnect
        nameWithType: ImpClient.Disconnect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Disconnect
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.Disconnect
  System.Exception:
    name:
      CSharp:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      VB:
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Exception
  DouglasDwyer.Imp.ImpClient.OnNetworkError*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.OnNetworkError*
        name: OnNetworkError
        nameWithType: ImpClient.OnNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnNetworkError
      VB:
      - id: DouglasDwyer.Imp.ImpClient.OnNetworkError*
        name: OnNetworkError
        nameWithType: ImpClient.OnNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnNetworkError
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.OnNetworkError
  DouglasDwyer.Imp.ImpClient.OnDisconnected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.OnDisconnected*
        name: OnDisconnected
        nameWithType: ImpClient.OnDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnDisconnected
      VB:
      - id: DouglasDwyer.Imp.ImpClient.OnDisconnected*
        name: OnDisconnected
        nameWithType: ImpClient.OnDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnDisconnected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient.OnDisconnected
  DouglasDwyer.Imp.SharedAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.SharedAttribute
        name: SharedAttribute
        nameWithType: SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute
      VB:
      - id: DouglasDwyer.Imp.SharedAttribute
        name: SharedAttribute
        nameWithType: SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.SharedAttribute
  DouglasDwyer.Imp.SharedAttribute.#ctor:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.SharedAttribute.#ctor
        name: SharedAttribute
        nameWithType: SharedAttribute.SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute.SharedAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.SharedAttribute.#ctor
        name: SharedAttribute
        nameWithType: SharedAttribute.SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute.SharedAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.SharedAttribute
    commentId: M:DouglasDwyer.Imp.SharedAttribute.#ctor
  DouglasDwyer.Imp.ImpClient.Serializer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Serializer
        name: Serializer
        nameWithType: ImpClient.Serializer
        qualifiedName: DouglasDwyer.Imp.ImpClient.Serializer
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Serializer
        name: Serializer
        nameWithType: ImpClient.Serializer
        qualifiedName: DouglasDwyer.Imp.ImpClient.Serializer
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.Serializer
  DouglasDwyer.Imp.ImpClient.SharedTypeBinder:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
        name: SharedTypeBinder
        nameWithType: ImpClient.SharedTypeBinder
        qualifiedName: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
      VB:
      - id: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
        name: SharedTypeBinder
        nameWithType: ImpClient.SharedTypeBinder
        qualifiedName: DouglasDwyer.Imp.ImpClient.SharedTypeBinder
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.SharedTypeBinder
  DouglasDwyer.Imp.ImpClient.Local:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Local
        name: Local
        nameWithType: ImpClient.Local
        qualifiedName: DouglasDwyer.Imp.ImpClient.Local
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Local
        name: Local
        nameWithType: ImpClient.Local
        qualifiedName: DouglasDwyer.Imp.ImpClient.Local
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.Local
  DouglasDwyer.Imp.ImpClient.Connected:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Connected
        name: Connected
        nameWithType: ImpClient.Connected
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connected
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Connected
        name: Connected
        nameWithType: ImpClient.Connected
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connected
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.Connected
  DouglasDwyer.Imp.ImpClient.NetworkID:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.NetworkID
        name: NetworkID
        nameWithType: ImpClient.NetworkID
        qualifiedName: DouglasDwyer.Imp.ImpClient.NetworkID
      VB:
      - id: DouglasDwyer.Imp.ImpClient.NetworkID
        name: NetworkID
        nameWithType: ImpClient.NetworkID
        qualifiedName: DouglasDwyer.Imp.ImpClient.NetworkID
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.NetworkID
  DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
        name: RemoteTaskScheduler
        nameWithType: ImpClient.RemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
      VB:
      - id: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
        name: RemoteTaskScheduler
        nameWithType: ImpClient.RemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.RemoteTaskScheduler
  DouglasDwyer.Imp.ImpClient.MaximumHeldObjects:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
        name: MaximumHeldObjects
        nameWithType: ImpClient.MaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
      VB:
      - id: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
        name: MaximumHeldObjects
        nameWithType: ImpClient.MaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.MaximumHeldObjects
  DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
        name: MaximumRemoteObjects
        nameWithType: ImpClient.MaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
      VB:
      - id: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
        name: MaximumRemoteObjects
        nameWithType: ImpClient.MaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: P:DouglasDwyer.Imp.ImpClient.MaximumRemoteObjects
  DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.Connect(System.String,System.Int32)
  DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
        name: Connect
        nameWithType: ImpClient.Connect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Connect
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.Connect(System.Net.IPAddress,System.Int32)
  DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.ConnectAsync(System.String,System.Int32)
  DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
        name: ConnectAsync
        nameWithType: ImpClient.ConnectAsync
        qualifiedName: DouglasDwyer.Imp.ImpClient.ConnectAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Net.IPAddress
        name: IPAddress
        nameWithType: IPAddress
        qualifiedName: System.Net.IPAddress
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
  DouglasDwyer.Imp.ImpClient.Disconnect:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.Disconnect
        name: Disconnect
        nameWithType: ImpClient.Disconnect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Disconnect
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.Disconnect
        name: Disconnect
        nameWithType: ImpClient.Disconnect
        qualifiedName: DouglasDwyer.Imp.ImpClient.Disconnect
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.Disconnect
  DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
        name: OnNetworkError
        nameWithType: ImpClient.OnNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnNetworkError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
        name: OnNetworkError
        nameWithType: ImpClient.OnNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnNetworkError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.OnNetworkError(System.Exception)
  DouglasDwyer.Imp.ImpClient.OnDisconnected:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient.OnDisconnected
        name: OnDisconnected
        nameWithType: ImpClient.OnDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnDisconnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpClient.OnDisconnected
        name: OnDisconnected
        nameWithType: ImpClient.OnDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpClient.OnDisconnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpClient
    commentId: M:DouglasDwyer.Imp.ImpClient.OnDisconnected
  DouglasDwyer.Imp.IImpClient{{T}}:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpClient`1
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IImpClient`1
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DouglasDwyer.Imp.IImpClient`1
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IImpClient{`0}
  DouglasDwyer.Imp.ImpClient`1.Server*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient`1.Server*
        name: Server
        nameWithType: ImpClient<T>.Server
        qualifiedName: DouglasDwyer.Imp.ImpClient<T>.Server
      VB:
      - id: DouglasDwyer.Imp.ImpClient`1.Server*
        name: Server
        nameWithType: ImpClient(Of T).Server
        qualifiedName: DouglasDwyer.Imp.ImpClient(Of T).Server
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpClient`1.Server
  DouglasDwyer.Imp.ImpClient`1:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpClient`1
        name: ImpClient
        nameWithType: ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.ImpClient`1
        name: ImpClient
        nameWithType: ImpClient
        qualifiedName: DouglasDwyer.Imp.ImpClient
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.ImpClient`1
  DouglasDwyer.PowerSerializer:
    name:
      CSharp:
      - name: DouglasDwyer.PowerSerializer
        nameWithType: DouglasDwyer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer
        isExternal: true
      VB:
      - name: DouglasDwyer.PowerSerializer
        nameWithType: DouglasDwyer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer
    isDefinition: true
    commentId: N:DouglasDwyer.PowerSerializer
  DouglasDwyer.PowerSerializer.PowerSerializer:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer
        name: PowerSerializer
        nameWithType: PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer
        isExternal: true
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer
        name: PowerSerializer
        nameWithType: PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer
        isExternal: true
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializer
  DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[]):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
        name: Deserialize<T>
        nameWithType: PowerSerializer.Deserialize<T>
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize<T>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
        name: Deserialize(Of T)
        nameWithType: PowerSerializer.Deserialize(Of T)
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(Of T)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
        name: CreateSerializationContext
        nameWithType: PowerSerializer.CreateSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
        name: CreateSerializationContext
        nameWithType: PowerSerializer.CreateSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
        name: CreateDeserializationContext
        nameWithType: PowerSerializer.CreateDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
        name: CreateDeserializationContext
        nameWithType: PowerSerializer.CreateDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
  DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
        name: ProcessObjectGraph
        nameWithType: PowerSerializer.ProcessObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
        name: ProcessObjectGraph
        nameWithType: PowerSerializer.ProcessObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
  ? DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
  : name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
        name: ReadObjectReference
        nameWithType: PowerSerializer.ReadObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
        name: ReadObjectReference
        nameWithType: PowerSerializer.ReadObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
  DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
        name: WritePrimitiveObject
        nameWithType: PowerSerializer.WritePrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
        name: WritePrimitiveObject
        nameWithType: PowerSerializer.WritePrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
  DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
        name: ReadPrimitiveObject
        nameWithType: PowerSerializer.ReadPrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
        name: ReadPrimitiveObject
        nameWithType: PowerSerializer.ReadPrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
  DouglasDwyer.PowerSerializer.PowerSerializer.Clone:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
        name: Clone
        nameWithType: PowerSerializer.Clone
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
        name: Clone
        nameWithType: PowerSerializer.Clone
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Clone
  DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
        name: TypeResolver
        nameWithType: PowerSerializer.TypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
        isExternal: true
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
        name: TypeResolver
        nameWithType: PowerSerializer.TypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
        isExternal: true
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: P:DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
  System.ICloneable:
    name:
      CSharp:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
      VB:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ICloneable
  DouglasDwyer.Imp.ImpPowerSerializer.Client*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Client*
        name: Client
        nameWithType: ImpPowerSerializer.Client
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Client
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Client*
        name: Client
        nameWithType: ImpPowerSerializer.Client
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Client
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.Client
  DouglasDwyer.Imp.INetworkSerializer.Client:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Client
        name: Client
        nameWithType: INetworkSerializer.Client
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Client
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Client
        name: Client
        nameWithType: INetworkSerializer.Client
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Client
    isDefinition: true
    parent: DouglasDwyer.Imp.INetworkSerializer
    commentId: P:DouglasDwyer.Imp.INetworkSerializer.Client
  DouglasDwyer.Imp.ImpPowerSerializer.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
        name: ImpPowerSerializer
        nameWithType: ImpPowerSerializer.ImpPowerSerializer
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.#ctor*
        name: ImpPowerSerializer
        nameWithType: ImpPowerSerializer.ImpPowerSerializer
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.ImpPowerSerializer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.#ctor
  DouglasDwyer.PowerSerializer.ITypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver
        name: ITypeResolver
        nameWithType: ITypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver
        isExternal: true
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver
        name: ITypeResolver
        nameWithType: ITypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver
        isExternal: true
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.ITypeResolver
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
        name: Serialize
        nameWithType: PowerSerializer.Serialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
        name: Serialize
        nameWithType: PowerSerializer.Serialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
  DouglasDwyer.Imp.ImpPowerSerializer.Serialize*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Serialize*
        name: Serialize
        nameWithType: ImpPowerSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Serialize
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Serialize*
        name: Serialize
        nameWithType: ImpPowerSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Serialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.Serialize
  DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
        name: Serialize
        nameWithType: INetworkSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Serialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
        name: Serialize
        nameWithType: INetworkSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Serialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.INetworkSerializer
    commentId: M:DouglasDwyer.Imp.INetworkSerializer.Serialize(System.Object)
  DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[]):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
        name: Deserialize
        nameWithType: PowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
        name: Deserialize
        nameWithType: PowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
  DouglasDwyer.Imp.ImpPowerSerializer.Deserialize*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize*
        name: Deserialize
        nameWithType: ImpPowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize*
        name: Deserialize
        nameWithType: ImpPowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.Deserialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.Deserialize
  DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[]):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
        name: Deserialize
        nameWithType: INetworkSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Deserialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
        name: Deserialize
        nameWithType: INetworkSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Deserialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.INetworkSerializer
    commentId: M:DouglasDwyer.Imp.INetworkSerializer.Deserialize(System.Byte[])
  DouglasDwyer.PowerSerializer.PowerSerializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializationContext
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  System.IO.BinaryWriter:
    name:
      CSharp:
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      VB:
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.BinaryWriter
  ? DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
  : name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
        name: SerializeObject
        nameWithType: PowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
        name: SerializeObject
        nameWithType: PowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
  DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject*
        name: SerializeObject
        nameWithType: ImpPowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject*
        name: SerializeObject
        nameWithType: ImpPowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.SerializeObject
  DouglasDwyer.PowerSerializer.PowerDeserializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerDeserializationContext
  System.IO.BinaryReader:
    name:
      CSharp:
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      VB:
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.BinaryReader
  ? DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
  : name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
        name: DeserializeObject
        nameWithType: PowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
        name: DeserializeObject
        nameWithType: PowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
  DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject*
        name: DeserializeObject
        nameWithType: ImpPowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject*
        name: DeserializeObject
        nameWithType: ImpPowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.DeserializeObject
  ? DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
  : name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
        name: WriteObjectReference
        nameWithType: PowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
        name: WriteObjectReference
        nameWithType: PowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
  DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference*
        name: WriteObjectReference
        nameWithType: ImpPowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference*
        name: WriteObjectReference
        nameWithType: ImpPowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.WriteObjectReference
  ? DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
  : name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
        name: ReadAndCreateObject
        nameWithType: PowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
        name: ReadAndCreateObject
        nameWithType: PowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
  DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject*
        name: ReadAndCreateObject
        nameWithType: ImpPowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject*
        name: ReadAndCreateObject
        nameWithType: ImpPowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.ReadAndCreateObject
  DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
        name: CheckTypeAllowance
        nameWithType: PowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
        name: CheckTypeAllowance
        nameWithType: PowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
  DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance*
        name: CheckTypeAllowance
        nameWithType: ImpPowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance*
        name: CheckTypeAllowance
        nameWithType: ImpPowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpPowerSerializer.CheckTypeAllowance
  DouglasDwyer.Imp.ImpPowerSerializer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpPowerSerializer
        name: ImpPowerSerializer
        nameWithType: ImpPowerSerializer
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer
      VB:
      - id: DouglasDwyer.Imp.ImpPowerSerializer
        name: ImpPowerSerializer
        nameWithType: ImpPowerSerializer
        qualifiedName: DouglasDwyer.Imp.ImpPowerSerializer
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.ImpPowerSerializer
  System.Collections.Generic.IList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IList`1
  System.Collections.Generic.IList{DouglasDwyer.Imp.IImpClient}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{DouglasDwyer.Imp.IImpClient}
  DouglasDwyer.Imp.ImpServer.ConnectedClients*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.ConnectedClients*
        name: ConnectedClients
        nameWithType: ImpServer.ConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.ConnectedClients
      VB:
      - id: DouglasDwyer.Imp.ImpServer.ConnectedClients*
        name: ConnectedClients
        nameWithType: ImpServer.ConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.ConnectedClients
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.ConnectedClients
  DouglasDwyer.Imp.ImpServer.DefaultProxyBinder*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder*
        name: DefaultProxyBinder
        nameWithType: ImpServer.DefaultProxyBinder
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder*
        name: DefaultProxyBinder
        nameWithType: ImpServer.DefaultProxyBinder
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
  DouglasDwyer.Imp.ImpServer.DefaultSerializer*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultSerializer*
        name: DefaultSerializer
        nameWithType: ImpServer.DefaultSerializer
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultSerializer
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultSerializer*
        name: DefaultSerializer
        nameWithType: ImpServer.DefaultSerializer
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultSerializer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.DefaultSerializer
  DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler*
        name: DefaultRemoteTaskScheduler
        nameWithType: ImpServer.DefaultRemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler*
        name: DefaultRemoteTaskScheduler
        nameWithType: ImpServer.DefaultRemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
  DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects*
        name: DefaultMaximumHeldObjects
        nameWithType: ImpServer.DefaultMaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects*
        name: DefaultMaximumHeldObjects
        nameWithType: ImpServer.DefaultMaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
  DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects*
        name: DefaultMaximumRemoteObjects
        nameWithType: ImpServer.DefaultMaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects*
        name: DefaultMaximumRemoteObjects
        nameWithType: ImpServer.DefaultMaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
  DouglasDwyer.Imp.ImpServer.MaximumConnectedClients*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients*
        name: MaximumConnectedClients
        nameWithType: ImpServer.MaximumConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
      VB:
      - id: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients*
        name: MaximumConnectedClients
        nameWithType: ImpServer.MaximumConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
  DouglasDwyer.Imp.ImpServer.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.#ctor*
        name: ImpServer
        nameWithType: ImpServer.ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer.ImpServer
      VB:
      - id: DouglasDwyer.Imp.ImpServer.#ctor*
        name: ImpServer
        nameWithType: ImpServer.ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer.ImpServer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.#ctor
  DouglasDwyer.Imp.ImpServer.Start*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.Start*
        name: Start
        nameWithType: ImpServer.Start
        qualifiedName: DouglasDwyer.Imp.ImpServer.Start
      VB:
      - id: DouglasDwyer.Imp.ImpServer.Start*
        name: Start
        nameWithType: ImpServer.Start
        qualifiedName: DouglasDwyer.Imp.ImpServer.Start
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.Start
  DouglasDwyer.Imp.ImpServer.Stop*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.Stop*
        name: Stop
        nameWithType: ImpServer.Stop
        qualifiedName: DouglasDwyer.Imp.ImpServer.Stop
      VB:
      - id: DouglasDwyer.Imp.ImpServer.Stop*
        name: Stop
        nameWithType: ImpServer.Stop
        qualifiedName: DouglasDwyer.Imp.ImpServer.Stop
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.Stop
  DouglasDwyer.Imp.ImpServer.OnClientConnected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientConnected*
        name: OnClientConnected
        nameWithType: ImpServer.OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientConnected
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientConnected*
        name: OnClientConnected
        nameWithType: ImpServer.OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientConnected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.OnClientConnected
  DouglasDwyer.Imp.ImpServer.OnClientNetworkError*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientNetworkError*
        name: OnClientNetworkError
        nameWithType: ImpServer.OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientNetworkError
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientNetworkError*
        name: OnClientNetworkError
        nameWithType: ImpServer.OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientNetworkError
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.OnClientNetworkError
  DouglasDwyer.Imp.ImpServer.OnClientDisconnected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientDisconnected*
        name: OnClientDisconnected
        nameWithType: ImpServer.OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientDisconnected
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientDisconnected*
        name: OnClientDisconnected
        nameWithType: ImpServer.OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientDisconnected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer.OnClientDisconnected
  DouglasDwyer.Imp.ImpServer.DefaultProxyBinder:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
        name: DefaultProxyBinder
        nameWithType: ImpServer.DefaultProxyBinder
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
        name: DefaultProxyBinder
        nameWithType: ImpServer.DefaultProxyBinder
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.DefaultProxyBinder
  DouglasDwyer.Imp.ImpServer.DefaultSerializer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultSerializer
        name: DefaultSerializer
        nameWithType: ImpServer.DefaultSerializer
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultSerializer
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultSerializer
        name: DefaultSerializer
        nameWithType: ImpServer.DefaultSerializer
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultSerializer
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.DefaultSerializer
  DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
        name: DefaultRemoteTaskScheduler
        nameWithType: ImpServer.DefaultRemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
        name: DefaultRemoteTaskScheduler
        nameWithType: ImpServer.DefaultRemoteTaskScheduler
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.DefaultRemoteTaskScheduler
  DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
        name: DefaultMaximumHeldObjects
        nameWithType: ImpServer.DefaultMaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
        name: DefaultMaximumHeldObjects
        nameWithType: ImpServer.DefaultMaximumHeldObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.DefaultMaximumHeldObjects
  DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
        name: DefaultMaximumRemoteObjects
        nameWithType: ImpServer.DefaultMaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
      VB:
      - id: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
        name: DefaultMaximumRemoteObjects
        nameWithType: ImpServer.DefaultMaximumRemoteObjects
        qualifiedName: DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.DefaultMaximumRemoteObjects
  DouglasDwyer.Imp.ImpServer.MaximumConnectedClients:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
        name: MaximumConnectedClients
        nameWithType: ImpServer.MaximumConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
      VB:
      - id: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
        name: MaximumConnectedClients
        nameWithType: ImpServer.MaximumConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: P:DouglasDwyer.Imp.ImpServer.MaximumConnectedClients
  DouglasDwyer.Imp.ImpServer.Start:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.Start
        name: Start
        nameWithType: ImpServer.Start
        qualifiedName: DouglasDwyer.Imp.ImpServer.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpServer.Start
        name: Start
        nameWithType: ImpServer.Start
        qualifiedName: DouglasDwyer.Imp.ImpServer.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: M:DouglasDwyer.Imp.ImpServer.Start
  DouglasDwyer.Imp.ImpServer.Stop:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.Stop
        name: Stop
        nameWithType: ImpServer.Stop
        qualifiedName: DouglasDwyer.Imp.ImpServer.Stop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpServer.Stop
        name: Stop
        nameWithType: ImpServer.Stop
        qualifiedName: DouglasDwyer.Imp.ImpServer.Stop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: M:DouglasDwyer.Imp.ImpServer.Stop
  DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
        name: OnClientConnected
        nameWithType: ImpServer.OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientConnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
        name: OnClientConnected
        nameWithType: ImpServer.OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientConnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: M:DouglasDwyer.Imp.ImpServer.OnClientConnected(DouglasDwyer.Imp.IImpClient)
  DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
        name: OnClientNetworkError
        nameWithType: ImpServer.OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientNetworkError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
        name: OnClientNetworkError
        nameWithType: ImpServer.OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientNetworkError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: M:DouglasDwyer.Imp.ImpServer.OnClientNetworkError(DouglasDwyer.Imp.IImpClient,System.Exception)
  DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
        name: OnClientDisconnected
        nameWithType: ImpServer.OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientDisconnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
        name: OnClientDisconnected
        nameWithType: ImpServer.OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer.OnClientDisconnected
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: DouglasDwyer.Imp.IImpClient
        name: IImpClient
        nameWithType: IImpClient
        qualifiedName: DouglasDwyer.Imp.IImpClient
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ImpServer
    commentId: M:DouglasDwyer.Imp.ImpServer.OnClientDisconnected(DouglasDwyer.Imp.IImpClient)
  DouglasDwyer.Imp.IImpServer{{T}}:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IImpServer`1
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: DouglasDwyer.Imp.IImpServer`1
        name: IImpServer
        nameWithType: IImpServer
        qualifiedName: DouglasDwyer.Imp.IImpServer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: DouglasDwyer.Imp.IImpServer`1
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.IImpServer{`0}
  System.Collections.Generic.IList{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{`0}
  DouglasDwyer.Imp.ImpServer`1.ConnectedClients*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1.ConnectedClients*
        name: ConnectedClients
        nameWithType: ImpServer<T>.ConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer<T>.ConnectedClients
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1.ConnectedClients*
        name: ConnectedClients
        nameWithType: ImpServer(Of T).ConnectedClients
        qualifiedName: DouglasDwyer.Imp.ImpServer(Of T).ConnectedClients
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer`1.ConnectedClients
  DouglasDwyer.Imp.ImpServer`1.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1.#ctor*
        name: ImpServer
        nameWithType: ImpServer<T>.ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer<T>.ImpServer
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1.#ctor*
        name: ImpServer
        nameWithType: ImpServer(Of T).ImpServer
        qualifiedName: DouglasDwyer.Imp.ImpServer(Of T).ImpServer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer`1.#ctor
  DouglasDwyer.Imp.ImpServer`1.OnClientConnected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientConnected*
        name: OnClientConnected
        nameWithType: ImpServer<T>.OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer<T>.OnClientConnected
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientConnected*
        name: OnClientConnected
        nameWithType: ImpServer(Of T).OnClientConnected
        qualifiedName: DouglasDwyer.Imp.ImpServer(Of T).OnClientConnected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer`1.OnClientConnected
  DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError*
        name: OnClientNetworkError
        nameWithType: ImpServer<T>.OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer<T>.OnClientNetworkError
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError*
        name: OnClientNetworkError
        nameWithType: ImpServer(Of T).OnClientNetworkError
        qualifiedName: DouglasDwyer.Imp.ImpServer(Of T).OnClientNetworkError
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer`1.OnClientNetworkError
  DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected*
        name: OnClientDisconnected
        nameWithType: ImpServer<T>.OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer<T>.OnClientDisconnected
      VB:
      - id: DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected*
        name: OnClientDisconnected
        nameWithType: ImpServer(Of T).OnClientDisconnected
        qualifiedName: DouglasDwyer.Imp.ImpServer(Of T).OnClientDisconnected
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ImpServer`1.OnClientDisconnected
  System.ICloneable.Clone:
    name:
      CSharp:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ICloneable
    commentId: M:System.ICloneable.Clone
  DouglasDwyer.Imp.INetworkSerializer.Client*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Client*
        name: Client
        nameWithType: INetworkSerializer.Client
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Client
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Client*
        name: Client
        nameWithType: INetworkSerializer.Client
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Client
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.INetworkSerializer.Client
  DouglasDwyer.Imp.INetworkSerializer.Serialize*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Serialize*
        name: Serialize
        nameWithType: INetworkSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Serialize
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Serialize*
        name: Serialize
        nameWithType: INetworkSerializer.Serialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Serialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.INetworkSerializer.Serialize
  DouglasDwyer.Imp.INetworkSerializer.Deserialize*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize*
        name: Deserialize
        nameWithType: INetworkSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Deserialize
      VB:
      - id: DouglasDwyer.Imp.INetworkSerializer.Deserialize*
        name: Deserialize
        nameWithType: INetworkSerializer.Deserialize
        qualifiedName: DouglasDwyer.Imp.INetworkSerializer.Deserialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.INetworkSerializer.Deserialize
  DouglasDwyer.Imp.IProxyBinder.GetDataForProxy*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy*
        name: GetDataForProxy
        nameWithType: IProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy*
        name: GetDataForProxy
        nameWithType: IProxyBinder.GetDataForProxy
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForProxy
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetDataForProxy
  DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType*
        name: GetDataForSharedType
        nameWithType: IProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType*
        name: GetDataForSharedType
        nameWithType: IProxyBinder.GetDataForSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetDataForSharedType
  DouglasDwyer.Imp.IProxyBinder.GetProxyTypes*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes*
        name: GetProxyTypes
        nameWithType: IProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes*
        name: GetProxyTypes
        nameWithType: IProxyBinder.GetProxyTypes
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetProxyTypes
  DouglasDwyer.Imp.IProxyBinder.GetRemoteType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetRemoteType*
        name: GetRemoteType
        nameWithType: IProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetRemoteType
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetRemoteType*
        name: GetRemoteType
        nameWithType: IProxyBinder.GetRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetRemoteType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetRemoteType
  DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType*
        name: GetProxyForRemoteType
        nameWithType: IProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType*
        name: GetProxyForRemoteType
        nameWithType: IProxyBinder.GetProxyForRemoteType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetProxyForRemoteType
  DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType*
        name: GetProxyForLocalType
        nameWithType: IProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType*
        name: GetProxyForLocalType
        nameWithType: IProxyBinder.GetProxyForLocalType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.GetProxyForLocalType
  DouglasDwyer.Imp.IProxyBinder.IsSharedType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.IProxyBinder.IsSharedType*
        name: IsSharedType
        nameWithType: IProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.IsSharedType
      VB:
      - id: DouglasDwyer.Imp.IProxyBinder.IsSharedType*
        name: IsSharedType
        nameWithType: IProxyBinder.IsSharedType
        qualifiedName: DouglasDwyer.Imp.IProxyBinder.IsSharedType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.IProxyBinder.IsSharedType
  DouglasDwyer.Imp.LocalAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.LocalAttribute
        name: LocalAttribute
        nameWithType: LocalAttribute
        qualifiedName: DouglasDwyer.Imp.LocalAttribute
      VB:
      - id: DouglasDwyer.Imp.LocalAttribute
        name: LocalAttribute
        nameWithType: LocalAttribute
        qualifiedName: DouglasDwyer.Imp.LocalAttribute
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.LocalAttribute
  DouglasDwyer.Imp.ProxyForAttribute.InterfaceType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType*
        name: InterfaceType
        nameWithType: ProxyForAttribute.InterfaceType
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
      VB:
      - id: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType*
        name: InterfaceType
        nameWithType: ProxyForAttribute.InterfaceType
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyForAttribute.InterfaceType
  DouglasDwyer.Imp.ProxyForAttribute.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyForAttribute.#ctor*
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute.ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute
      VB:
      - id: DouglasDwyer.Imp.ProxyForAttribute.#ctor*
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute.ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyForAttribute.#ctor
  DouglasDwyer.Imp.ProxyForAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyForAttribute
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute
      VB:
      - id: DouglasDwyer.Imp.ProxyForAttribute
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.ProxyForAttribute
  DouglasDwyer.Imp.ProxyType.InterfaceID*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.InterfaceID*
        name: InterfaceID
        nameWithType: ProxyType.InterfaceID
        qualifiedName: DouglasDwyer.Imp.ProxyType.InterfaceID
      VB:
      - id: DouglasDwyer.Imp.ProxyType.InterfaceID*
        name: InterfaceID
        nameWithType: ProxyType.InterfaceID
        qualifiedName: DouglasDwyer.Imp.ProxyType.InterfaceID
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.InterfaceID
  DouglasDwyer.Imp.ProxyType.InterfaceType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.InterfaceType*
        name: InterfaceType
        nameWithType: ProxyType.InterfaceType
        qualifiedName: DouglasDwyer.Imp.ProxyType.InterfaceType
      VB:
      - id: DouglasDwyer.Imp.ProxyType.InterfaceType*
        name: InterfaceType
        nameWithType: ProxyType.InterfaceType
        qualifiedName: DouglasDwyer.Imp.ProxyType.InterfaceType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.InterfaceType
  DouglasDwyer.Imp.ProxyType.RemoteBaseType*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.RemoteBaseType*
        name: RemoteBaseType
        nameWithType: ProxyType.RemoteBaseType
        qualifiedName: DouglasDwyer.Imp.ProxyType.RemoteBaseType
      VB:
      - id: DouglasDwyer.Imp.ProxyType.RemoteBaseType*
        name: RemoteBaseType
        nameWithType: ProxyType.RemoteBaseType
        qualifiedName: DouglasDwyer.Imp.ProxyType.RemoteBaseType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.RemoteBaseType
  System.Collections.Generic.IReadOnlyList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IReadOnlyList`1
  System.Collections.Generic.IReadOnlyList{DouglasDwyer.Imp.RemoteMethodInvoker}:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DouglasDwyer.Imp.RemoteMethodInvoker
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DouglasDwyer.Imp.RemoteMethodInvoker
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IReadOnlyList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IReadOnlyList{DouglasDwyer.Imp.RemoteMethodInvoker}
  DouglasDwyer.Imp.ProxyType.Methods*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.Methods*
        name: Methods
        nameWithType: ProxyType.Methods
        qualifiedName: DouglasDwyer.Imp.ProxyType.Methods
      VB:
      - id: DouglasDwyer.Imp.ProxyType.Methods*
        name: Methods
        nameWithType: ProxyType.Methods
        qualifiedName: DouglasDwyer.Imp.ProxyType.Methods
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.Methods
  System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}:
    name:
      CSharp:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Reflection.PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: System.Reflection.PropertyInfo
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IReadOnlyList`1
        name: IReadOnlyList
        nameWithType: IReadOnlyList
        qualifiedName: System.Collections.Generic.IReadOnlyList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Reflection.PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: System.Reflection.PropertyInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IReadOnlyList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
  DouglasDwyer.Imp.ProxyType.Properties*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.Properties*
        name: Properties
        nameWithType: ProxyType.Properties
        qualifiedName: DouglasDwyer.Imp.ProxyType.Properties
      VB:
      - id: DouglasDwyer.Imp.ProxyType.Properties*
        name: Properties
        nameWithType: ProxyType.Properties
        qualifiedName: DouglasDwyer.Imp.ProxyType.Properties
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.Properties
  DouglasDwyer.Imp.ProxyType.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyType.#ctor*
        name: ProxyType
        nameWithType: ProxyType.ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType.ProxyType
      VB:
      - id: DouglasDwyer.Imp.ProxyType.#ctor*
        name: ProxyType
        nameWithType: ProxyType.ProxyType
        qualifiedName: DouglasDwyer.Imp.ProxyType.ProxyType
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ProxyType.#ctor
  System.Exception.GetBaseException:
    name:
      CSharp:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetBaseException
        name: GetBaseException
        nameWithType: Exception.GetBaseException
        qualifiedName: System.Exception.GetBaseException
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetBaseException
  System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext):
    name:
      CSharp:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
        name: GetObjectData
        nameWithType: Exception.GetObjectData
        qualifiedName: System.Exception.GetObjectData
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Runtime.Serialization.SerializationInfo
        name: SerializationInfo
        nameWithType: SerializationInfo
        qualifiedName: System.Runtime.Serialization.SerializationInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Runtime.Serialization.StreamingContext
        name: StreamingContext
        nameWithType: StreamingContext
        qualifiedName: System.Runtime.Serialization.StreamingContext
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  System.Exception.GetType:
    name:
      CSharp:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.GetType
        name: GetType
        nameWithType: Exception.GetType
        qualifiedName: System.Exception.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.GetType
  System.Exception.ToString:
    name:
      CSharp:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Exception.ToString
        name: ToString
        nameWithType: Exception.ToString
        qualifiedName: System.Exception.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Exception
    commentId: M:System.Exception.ToString
  System.Exception.Data:
    name:
      CSharp:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
      VB:
      - id: System.Exception.Data
        name: Data
        nameWithType: Exception.Data
        qualifiedName: System.Exception.Data
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Data
  System.Exception.HelpLink:
    name:
      CSharp:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
      VB:
      - id: System.Exception.HelpLink
        name: HelpLink
        nameWithType: Exception.HelpLink
        qualifiedName: System.Exception.HelpLink
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HelpLink
  System.Exception.HResult:
    name:
      CSharp:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
      VB:
      - id: System.Exception.HResult
        name: HResult
        nameWithType: Exception.HResult
        qualifiedName: System.Exception.HResult
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.HResult
  System.Exception.InnerException:
    name:
      CSharp:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
      VB:
      - id: System.Exception.InnerException
        name: InnerException
        nameWithType: Exception.InnerException
        qualifiedName: System.Exception.InnerException
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.InnerException
  System.Exception.Source:
    name:
      CSharp:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
      VB:
      - id: System.Exception.Source
        name: Source
        nameWithType: Exception.Source
        qualifiedName: System.Exception.Source
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Source
  System.Exception.TargetSite:
    name:
      CSharp:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
      VB:
      - id: System.Exception.TargetSite
        name: TargetSite
        nameWithType: Exception.TargetSite
        qualifiedName: System.Exception.TargetSite
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.TargetSite
  System.Exception.SerializeObjectState:
    name:
      CSharp:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
      VB:
      - id: System.Exception.SerializeObjectState
        name: SerializeObjectState
        nameWithType: Exception.SerializeObjectState
        qualifiedName: System.Exception.SerializeObjectState
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: E:System.Exception.SerializeObjectState
  System.Runtime.Serialization:
    name:
      CSharp:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
        isExternal: true
      VB:
      - name: System.Runtime.Serialization
        nameWithType: System.Runtime.Serialization
        qualifiedName: System.Runtime.Serialization
    isDefinition: true
    commentId: N:System.Runtime.Serialization
  System.Runtime.Serialization.ISerializable:
    name:
      CSharp:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
      VB:
      - id: System.Runtime.Serialization.ISerializable
        name: ISerializable
        nameWithType: ISerializable
        qualifiedName: System.Runtime.Serialization.ISerializable
        isExternal: true
    isDefinition: true
    parent: System.Runtime.Serialization
    commentId: T:System.Runtime.Serialization.ISerializable
  System.Exception.StackTrace:
    name:
      CSharp:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
      VB:
      - id: System.Exception.StackTrace
        name: StackTrace
        nameWithType: Exception.StackTrace
        qualifiedName: System.Exception.StackTrace
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.StackTrace
  DouglasDwyer.Imp.RemoteException.StackTrace*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteException.StackTrace*
        name: StackTrace
        nameWithType: RemoteException.StackTrace
        qualifiedName: DouglasDwyer.Imp.RemoteException.StackTrace
      VB:
      - id: DouglasDwyer.Imp.RemoteException.StackTrace*
        name: StackTrace
        nameWithType: RemoteException.StackTrace
        qualifiedName: DouglasDwyer.Imp.RemoteException.StackTrace
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteException.StackTrace
  System.Exception.Message:
    name:
      CSharp:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
      VB:
      - id: System.Exception.Message
        name: Message
        nameWithType: Exception.Message
        qualifiedName: System.Exception.Message
        isExternal: true
    isDefinition: true
    parent: System.Exception
    commentId: P:System.Exception.Message
  DouglasDwyer.Imp.RemoteException.Message*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteException.Message*
        name: Message
        nameWithType: RemoteException.Message
        qualifiedName: DouglasDwyer.Imp.RemoteException.Message
      VB:
      - id: DouglasDwyer.Imp.RemoteException.Message*
        name: Message
        nameWithType: RemoteException.Message
        qualifiedName: DouglasDwyer.Imp.RemoteException.Message
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteException.Message
  DouglasDwyer.Imp.RemoteException.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteException.#ctor*
        name: RemoteException
        nameWithType: RemoteException.RemoteException
        qualifiedName: DouglasDwyer.Imp.RemoteException.RemoteException
      VB:
      - id: DouglasDwyer.Imp.RemoteException.#ctor*
        name: RemoteException
        nameWithType: RemoteException.RemoteException
        qualifiedName: DouglasDwyer.Imp.RemoteException.RemoteException
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteException.#ctor
  DouglasDwyer.Imp.RemoteException:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteException
        name: RemoteException
        nameWithType: RemoteException
        qualifiedName: DouglasDwyer.Imp.RemoteException
      VB:
      - id: DouglasDwyer.Imp.RemoteException
        name: RemoteException
        nameWithType: RemoteException
        qualifiedName: DouglasDwyer.Imp.RemoteException
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.RemoteException
  DouglasDwyer.Imp.RemoteSharedObject:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject
        name: RemoteSharedObject
        nameWithType: RemoteSharedObject
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject
        name: RemoteSharedObject
        nameWithType: RemoteSharedObject
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject
    isDefinition: true
    parent: DouglasDwyer.Imp
    commentId: T:DouglasDwyer.Imp.RemoteSharedObject
  DouglasDwyer.Imp.RemoteSharedObject.ObjectID:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
        name: ObjectID
        nameWithType: RemoteSharedObject.ObjectID
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
        name: ObjectID
        nameWithType: RemoteSharedObject.ObjectID
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
    isDefinition: true
    parent: DouglasDwyer.Imp.RemoteSharedObject
    commentId: P:DouglasDwyer.Imp.RemoteSharedObject.ObjectID
  DouglasDwyer.Imp.RemoteSharedObject.HostClient:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.HostClient
        name: HostClient
        nameWithType: RemoteSharedObject.HostClient
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.HostClient
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.HostClient
        name: HostClient
        nameWithType: RemoteSharedObject.HostClient
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.HostClient
    isDefinition: true
    parent: DouglasDwyer.Imp.RemoteSharedObject
    commentId: P:DouglasDwyer.Imp.RemoteSharedObject.HostClient
  DouglasDwyer.Imp.RemoteSharedObject.ToString:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ToString
        name: ToString
        nameWithType: RemoteSharedObject.ToString
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ToString
        name: ToString
        nameWithType: RemoteSharedObject.ToString
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.RemoteSharedObject
    commentId: M:DouglasDwyer.Imp.RemoteSharedObject.ToString
  DouglasDwyer.Imp.RemoteImpClient.Server*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteImpClient.Server*
        name: Server
        nameWithType: RemoteImpClient.Server
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient.Server
      VB:
      - id: DouglasDwyer.Imp.RemoteImpClient.Server*
        name: Server
        nameWithType: RemoteImpClient.Server
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient.Server
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteImpClient.Server
  DouglasDwyer.Imp.RemoteImpClient.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteImpClient.#ctor*
        name: RemoteImpClient
        nameWithType: RemoteImpClient.RemoteImpClient
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient.RemoteImpClient
      VB:
      - id: DouglasDwyer.Imp.RemoteImpClient.#ctor*
        name: RemoteImpClient
        nameWithType: RemoteImpClient.RemoteImpClient
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient.RemoteImpClient
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteImpClient.#ctor
  DouglasDwyer.Imp.RemoteImpClient:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteImpClient
        name: RemoteImpClient
        nameWithType: RemoteImpClient
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient
      VB:
      - id: DouglasDwyer.Imp.RemoteImpClient
        name: RemoteImpClient
        nameWithType: RemoteImpClient
        qualifiedName: DouglasDwyer.Imp.RemoteImpClient
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.RemoteImpClient
  DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute.ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
        name: ProxyForAttribute
        nameWithType: ProxyForAttribute.ProxyForAttribute
        qualifiedName: DouglasDwyer.Imp.ProxyForAttribute.ProxyForAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.Imp.ProxyForAttribute
    commentId: M:DouglasDwyer.Imp.ProxyForAttribute.#ctor(System.Type)
  DouglasDwyer.Imp.RemoteImpServer.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteImpServer.#ctor*
        name: RemoteImpServer
        nameWithType: RemoteImpServer.RemoteImpServer
        qualifiedName: DouglasDwyer.Imp.RemoteImpServer.RemoteImpServer
      VB:
      - id: DouglasDwyer.Imp.RemoteImpServer.#ctor*
        name: RemoteImpServer
        nameWithType: RemoteImpServer.RemoteImpServer
        qualifiedName: DouglasDwyer.Imp.RemoteImpServer.RemoteImpServer
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteImpServer.#ctor
  DouglasDwyer.Imp.RemoteImpServer:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteImpServer
        name: RemoteImpServer
        nameWithType: RemoteImpServer
        qualifiedName: DouglasDwyer.Imp.RemoteImpServer
      VB:
      - id: DouglasDwyer.Imp.RemoteImpServer
        name: RemoteImpServer
        nameWithType: RemoteImpServer
        qualifiedName: DouglasDwyer.Imp.RemoteImpServer
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.RemoteImpServer
  System.Reflection:
    name:
      CSharp:
      - name: System.Reflection
        nameWithType: System.Reflection
        qualifiedName: System.Reflection
        isExternal: true
      VB:
      - name: System.Reflection
        nameWithType: System.Reflection
        qualifiedName: System.Reflection
    isDefinition: true
    commentId: N:System.Reflection
  System.Reflection.MethodInfo:
    name:
      CSharp:
      - id: System.Reflection.MethodInfo
        name: MethodInfo
        nameWithType: MethodInfo
        qualifiedName: System.Reflection.MethodInfo
        isExternal: true
      VB:
      - id: System.Reflection.MethodInfo
        name: MethodInfo
        nameWithType: MethodInfo
        qualifiedName: System.Reflection.MethodInfo
        isExternal: true
    isDefinition: true
    parent: System.Reflection
    commentId: T:System.Reflection.MethodInfo
  DouglasDwyer.Imp.RemoteMethodInvoker.Method*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.Method*
        name: Method
        nameWithType: RemoteMethodInvoker.Method
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.Method
      VB:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.Method*
        name: Method
        nameWithType: RemoteMethodInvoker.Method
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.Method
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteMethodInvoker.Method
  System.Func`5:
    name:
      CSharp:
      - id: System.Func`5
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T4
        nameWithType: T4
        qualifiedName: T4
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`5
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T3
        nameWithType: T3
        qualifiedName: T3
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T4
        nameWithType: T4
        qualifiedName: T4
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Func`5
  ? System.Func{System.Threading.Tasks.TaskScheduler,System.Object,System.Object[],System.Type[],System.Threading.Tasks.Task{System.Object}}
  : name:
      CSharp:
      - id: System.Func`5
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Threading.Tasks.TaskScheduler
        name: TaskScheduler
        nameWithType: TaskScheduler
        qualifiedName: System.Threading.Tasks.TaskScheduler
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`5
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Threading.Tasks.TaskScheduler
        name: TaskScheduler
        nameWithType: TaskScheduler
        qualifiedName: System.Threading.Tasks.TaskScheduler
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`5
    parent: System
    commentId: T:System.Func{System.Threading.Tasks.TaskScheduler,System.Object,System.Object[],System.Type[],System.Threading.Tasks.Task{System.Object}}
  DouglasDwyer.Imp.RemoteMethodInvoker.GetResult*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult*
        name: GetResult
        nameWithType: RemoteMethodInvoker.GetResult
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
      VB:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult*
        name: GetResult
        nameWithType: RemoteMethodInvoker.GetResult
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteMethodInvoker.GetResult
  DouglasDwyer.Imp.RemoteMethodInvoker.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.#ctor*
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker.RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.RemoteMethodInvoker
      VB:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.#ctor*
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker.RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.RemoteMethodInvoker
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteMethodInvoker.#ctor
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks.Task{System.Object}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Object}
  System.Object[]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Type[]:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  DouglasDwyer.Imp.RemoteMethodInvoker.Invoke*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke*
        name: Invoke
        nameWithType: RemoteMethodInvoker.Invoke
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke
      VB:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke*
        name: Invoke
        nameWithType: RemoteMethodInvoker.Invoke
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker.Invoke
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteMethodInvoker.Invoke
  DouglasDwyer.Imp.RemoteMethodInvoker:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker
      VB:
      - id: DouglasDwyer.Imp.RemoteMethodInvoker
        name: RemoteMethodInvoker
        nameWithType: RemoteMethodInvoker
        qualifiedName: DouglasDwyer.Imp.RemoteMethodInvoker
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.RemoteMethodInvoker
  DouglasDwyer.Imp.RemoteSharedObject.ObjectID*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ObjectID*
        name: ObjectID
        nameWithType: RemoteSharedObject.ObjectID
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ObjectID*
        name: ObjectID
        nameWithType: RemoteSharedObject.ObjectID
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ObjectID
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteSharedObject.ObjectID
  DouglasDwyer.Imp.RemoteSharedObject.HostClient*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.HostClient*
        name: HostClient
        nameWithType: RemoteSharedObject.HostClient
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.HostClient
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.HostClient*
        name: HostClient
        nameWithType: RemoteSharedObject.HostClient
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.HostClient
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteSharedObject.HostClient
  DouglasDwyer.Imp.RemoteSharedObject.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.#ctor*
        name: RemoteSharedObject
        nameWithType: RemoteSharedObject.RemoteSharedObject
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.RemoteSharedObject
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.#ctor*
        name: RemoteSharedObject
        nameWithType: RemoteSharedObject.RemoteSharedObject
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.RemoteSharedObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteSharedObject.#ctor
  DouglasDwyer.Imp.RemoteSharedObject.ToString*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ToString*
        name: ToString
        nameWithType: RemoteSharedObject.ToString
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ToString
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.ToString*
        name: ToString
        nameWithType: RemoteSharedObject.ToString
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.ToString
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteSharedObject.ToString
  DouglasDwyer.Imp.RemoteSharedObject.Finalize*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.RemoteSharedObject.Finalize*
        name: Finalize
        nameWithType: RemoteSharedObject.Finalize
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.Finalize
      VB:
      - id: DouglasDwyer.Imp.RemoteSharedObject.Finalize*
        name: Finalize
        nameWithType: RemoteSharedObject.Finalize
        qualifiedName: DouglasDwyer.Imp.RemoteSharedObject.Finalize
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.RemoteSharedObject.Finalize
  DouglasDwyer.Imp.ShareAsAttribute.TypeToShare*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare*
        name: TypeToShare
        nameWithType: ShareAsAttribute.TypeToShare
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
      VB:
      - id: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare*
        name: TypeToShare
        nameWithType: ShareAsAttribute.TypeToShare
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ShareAsAttribute.TypeToShare
  DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding*
        name: InterfaceBinding
        nameWithType: ShareAsAttribute.InterfaceBinding
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
      VB:
      - id: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding*
        name: InterfaceBinding
        nameWithType: ShareAsAttribute.InterfaceBinding
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ShareAsAttribute.InterfaceBinding
  DouglasDwyer.Imp.ShareAsAttribute.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ShareAsAttribute.#ctor*
        name: ShareAsAttribute
        nameWithType: ShareAsAttribute.ShareAsAttribute
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute
      VB:
      - id: DouglasDwyer.Imp.ShareAsAttribute.#ctor*
        name: ShareAsAttribute
        nameWithType: ShareAsAttribute.ShareAsAttribute
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute.ShareAsAttribute
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.ShareAsAttribute.#ctor
  DouglasDwyer.Imp.ShareAsAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.ShareAsAttribute
        name: ShareAsAttribute
        nameWithType: ShareAsAttribute
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute
      VB:
      - id: DouglasDwyer.Imp.ShareAsAttribute
        name: ShareAsAttribute
        nameWithType: ShareAsAttribute
        qualifiedName: DouglasDwyer.Imp.ShareAsAttribute
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.ShareAsAttribute
  DouglasDwyer.Imp.SharedAttribute.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.SharedAttribute.#ctor*
        name: SharedAttribute
        nameWithType: SharedAttribute.SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute.SharedAttribute
      VB:
      - id: DouglasDwyer.Imp.SharedAttribute.#ctor*
        name: SharedAttribute
        nameWithType: SharedAttribute.SharedAttribute
        qualifiedName: DouglasDwyer.Imp.SharedAttribute.SharedAttribute
    isDefinition: true
    commentId: Overload:DouglasDwyer.Imp.SharedAttribute.#ctor
  DouglasDwyer.Imp.UnreliableAttribute:
    name:
      CSharp:
      - id: DouglasDwyer.Imp.UnreliableAttribute
        name: UnreliableAttribute
        nameWithType: UnreliableAttribute
        qualifiedName: DouglasDwyer.Imp.UnreliableAttribute
      VB:
      - id: DouglasDwyer.Imp.UnreliableAttribute
        name: UnreliableAttribute
        nameWithType: UnreliableAttribute
        qualifiedName: DouglasDwyer.Imp.UnreliableAttribute
    isDefinition: true
    commentId: T:DouglasDwyer.Imp.UnreliableAttribute
